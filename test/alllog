python3 -m pytest tests/ --chirc-exe=../build/npcp --json=tests/report.json --html=tests/report.html 
============================= test session starts ==============================
platform linux -- Python 3.5.2, pytest-4.4.1, py-1.8.0, pluggy-0.9.0
rootdir: /mnt/d/CODES/GitHub/npcp/test
plugins: report-0.2.1, metadata-1.8.0, json-0.4.0, html-1.20.0
collected 224 items

tests/chirc/tests/test_channel.py FFFFFFFFF.F.FFFFFFFFFFFFFFFFFFFFFFFFFF [ 16%]
FFFFFFFFFFFFFFFFFFFFFFFF                                                 [ 27%]
tests/chirc/tests/test_connection.py ................................... [ 43%]
........                                                                 [ 46%]
tests/chirc/tests/test_lusers_motd.py ........FFFFFFFF                   [ 54%]
tests/chirc/tests/test_modes.py ....F..FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 71%]
FFFFFFFFFFFFFFFFFFFFFFFFFF                                               [ 83%]
tests/chirc/tests/test_ping.py ......                                    [ 86%]
tests/chirc/tests/test_privmsg.py ..............                         [ 92%]
tests/chirc/tests/test_robustness.py .FFFFFFFF                           [ 96%]
tests/chirc/tests/test_unknown.py ...                                    [ 97%]
tests/chirc/tests/test_whois.py F..FF                                    [100%]

=================================== FAILURES ===================================
_____________________________ TestJOIN.test_join1 ______________________________

self = <chirc.tests.test_channel.TestJOIN object at 0x7ff8619aa550>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8619aa2b0>

    def test_join1(self, irc_session):
        """
        A single user connects to the server and joins a channel
        that does not already exist.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("JOIN #test")
    
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_channel.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8619aa2b0>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86198fcf8>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_____________________________ TestJOIN.test_join2 ______________________________

self = <chirc.tests.test_channel.TestJOIN object at 0x7ff861943978>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861943c88>

    def test_join2(self, irc_session):
        """
        A single user connects to the server and joins a channel
        that does not already exist. The user tries to join it again,
        which results in no reply.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("JOIN #test")
    
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_channel.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861943c88>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861943e10>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_____________________________ TestJOIN.test_join3 ______________________________

self = <chirc.tests.test_channel.TestJOIN object at 0x7ff86166b9e8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86166bb38>

    def test_join3(self, irc_session):
        """
        Five clients connect to the server and join the same channel
        """
    
        clients = irc_session.connect_clients(5)
    
        for (nick, client) in clients:
            client.send_cmd("JOIN #test")
>           irc_session.verify_join(client, nick, "#test")

tests/chirc/tests/test_channel.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86166bb38>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86170cf98>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_____________________________ TestJOIN.test_join4 ______________________________

self = <chirc.tests.test_channel.TestJOIN object at 0x7ff86157f940>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86157fac8>

    def test_join4(self, irc_session):
        """
        Two clients connect to the server, one joins a channel
        (that does not previously exist) first, and the other
        one joins it after that.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
        client2 = irc_session.connect_user("user2", "User Two")
    
        client1.send_cmd("JOIN #test")
    
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_channel.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86157fac8>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86157fd30>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_____________________________ TestJOIN.test_join5 ______________________________

self = <chirc.tests.test_channel.TestJOIN object at 0x7ff8616e2d68>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8616e2f98>

    def test_join5(self, irc_session):
        """
        Five clients connect to the server and all join the same channel.
        We verify that the JOINs are correctly relayed in the channel.
        """
    
        clients = irc_session.connect_clients(5)
    
        for (nick, client) in clients:
            client.send_cmd("JOIN #test")
>           irc_session.verify_join(client, nick, "#test")

tests/chirc/tests/test_channel.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8616e2f98>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86167f2e8>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
__________________________ TestJOIN.test_join_params ___________________________

self = <chirc.tests.test_channel.TestJOIN object at 0x7ff8616566a0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8616568d0>

    def test_join_params(self, irc_session):
        """
        Test ERR_NEEDMOREPARAMS reply
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("JOIN")
    
        irc_session.get_ERR_NEEDMOREPARAMS_reply(client1,
>                                                expect_nick="user1", expect_cmd="JOIN")

tests/chirc/tests/test_channel.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:364: in get_ERR_NEEDMOREPARAMS_reply
    long_param_re = "Not enough parameters")
tests/chirc/tests/common.py:356: in get_reply
    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)
tests/chirc/tests/common.py:438: in verify_reply
    long_param_re = long_param_re, long_param_values = long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8616568d0>, a = '421'
b = '461'
explanation = 'Expected command 461, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861656a58>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command 461, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
___________________ TestChannelPRIVMSG.test_channel_privmsg1 ___________________

self = <chirc.tests.test_channel.TestChannelPRIVMSG object at 0x7ff86170c438>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86170c550>

    def test_channel_privmsg1(self, irc_session):
        """
        Two clients connect to the server, join the same channel,
        and send a PRIVMSG to the channel.
        """
>       self._test_join_and_privmsg(irc_session, 2)

tests/chirc/tests/test_channel.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_channel.py:113: in _test_join_and_privmsg
    clients = irc_session.connect_clients(numclients, join_channel = "#test")
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86170c550>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86170c710>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
___________________ TestChannelPRIVMSG.test_channel_privmsg2 ___________________

self = <chirc.tests.test_channel.TestChannelPRIVMSG object at 0x7ff861943940>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861943e48>

    def test_channel_privmsg2(self, irc_session):
        """
        Five clients connect to the server, join the same channel,
        and send a PRIVMSG to the channel.
        """
>       self._test_join_and_privmsg(irc_session, 5)

tests/chirc/tests/test_channel.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_channel.py:113: in _test_join_and_privmsg
    clients = irc_session.connect_clients(numclients, join_channel = "#test")
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861943e48>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8616e2860>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
___________________ TestChannelPRIVMSG.test_channel_privmsg3 ___________________

self = <chirc.tests.test_channel.TestChannelPRIVMSG object at 0x7ff8615e2e48>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8615e2048>

    def test_channel_privmsg3(self, irc_session):
        """
        Twenty clients connect to the server, join the same channel,
        and send a PRIVMSG to the channel.
        """
>       self._test_join_and_privmsg(irc_session, 20)

tests/chirc/tests/test_channel.py:143: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_channel.py:113: in _test_join_and_privmsg
    clients = irc_session.connect_clients(numclients, join_channel = "#test")
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8615e2048>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8615686d8>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_____________ TestChannelPRIVMSG.test_channel_privmsg_notonchannel _____________

self = <chirc.tests.test_channel.TestChannelPRIVMSG object at 0x7ff8614db668>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8614db6a0>

    def test_channel_privmsg_notonchannel(self, irc_session):
        """
        Two clients connect to the server. One joins #test, and the other
        one tries to send a message to #test.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("JOIN #test")
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_channel.py:170: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8614db6a0>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8614dbc18>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestPART.test_channel_part1 __________________________

self = <chirc.tests.test_channel.TestPART object at 0x7ff861686978>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8616868d0>

    def test_channel_part1(self, irc_session):
        """
        Two clients connect to the server and join #test. The first
        user leaves #test. Both clients should get a relay of the PART
        message.
        """
>       clients = irc_session.connect_clients(2, join_channel = "#test")

tests/chirc/tests/test_channel.py:225: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8616868d0>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861641c18>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestPART.test_channel_part2 __________________________

self = <chirc.tests.test_channel.TestPART object at 0x7ff86156c550>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86156c400>

    def test_channel_part2(self, irc_session):
        """
        Two clients connect to the server and join #test. The first
        user leaves #test (with a custom message). Both clients should
        get a relay of the PART message.
        """
>       clients = irc_session.connect_clients(2, join_channel = "#test")

tests/chirc/tests/test_channel.py:241: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86156c400>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86156c9b0>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestPART.test_channel_part3 __________________________

self = <chirc.tests.test_channel.TestPART object at 0x7ff861641cc0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861641fd0>

    def test_channel_part3(self, irc_session):
        """
        Two clients connect to the server and join #test.
    
        The first one sends a PRIVMSG to the channel. Then, the second one
        leaves the channel. The first one sends another PRIVMSG to the channel.
        The second one shouldn't receive anything.
        """
    
>       clients = irc_session.connect_clients(2, join_channel = "#test")

tests/chirc/tests/test_channel.py:260: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861641fd0>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8614dba90>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestPART.test_channel_part4 __________________________

self = <chirc.tests.test_channel.TestPART object at 0x7ff861943a90>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86167f208>

    def test_channel_part4(self, irc_session):
        """
        Two clients connect to the server, join a channel, and then leave it.
        """
>       self._test_join_and_part(irc_session, 2)

tests/chirc/tests/test_channel.py:280: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_channel.py:204: in _test_join_and_part
    clients = irc_session.connect_clients(numclients, join_channel = "#test")
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86167f208>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8616e27b8>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestPART.test_channel_part5 __________________________

self = <chirc.tests.test_channel.TestPART object at 0x7ff86170c4a8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8614e7f28>

    def test_channel_part5(self, irc_session):
        """
        Five clients connect to the server, join a channel, and then leave it.
        """
>       self._test_join_and_part(irc_session, 5)

tests/chirc/tests/test_channel.py:287: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_channel.py:204: in _test_join_and_part
    clients = irc_session.connect_clients(numclients, join_channel = "#test")
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8614e7f28>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8615e84a8>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestPART.test_channel_part6 __________________________

self = <chirc.tests.test_channel.TestPART object at 0x7ff8615582b0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8615582e8>

    def test_channel_part6(self, irc_session):
        """
        Twenty clients connect to the server, join a channel, and then leave it.
        """
>       self._test_join_and_part(irc_session, 20)

tests/chirc/tests/test_channel.py:294: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_channel.py:204: in _test_join_and_part
    clients = irc_session.connect_clients(numclients, join_channel = "#test")
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8615582e8>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86156c3c8>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestPART.test_channel_part7 __________________________

self = <chirc.tests.test_channel.TestPART object at 0x7ff86168eb38>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86168ec88>

    def test_channel_part7(self, irc_session):
        """
        Two clients connect to the server, join a channel, then leave it,
        then join it again, and leave it again.
        """
>       self._test_join_and_part_and_join_and_part(irc_session, 2)

tests/chirc/tests/test_channel.py:302: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_channel.py:213: in _test_join_and_part_and_join_and_part
    clients = irc_session.connect_clients(numclients, join_channel = "#test")
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86168ec88>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8614db860>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestPART.test_channel_part8 __________________________

self = <chirc.tests.test_channel.TestPART object at 0x7ff86155a390>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86155a550>

    def test_channel_part8(self, irc_session):
        """
        Five clients connect to the server, join a channel, then leave it,
        then join it again, and leave it again.
        """
>       self._test_join_and_part_and_join_and_part(irc_session, 5)

tests/chirc/tests/test_channel.py:310: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_channel.py:213: in _test_join_and_part_and_join_and_part
    clients = irc_session.connect_clients(numclients, join_channel = "#test")
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86155a550>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86145e208>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestPART.test_channel_part9 __________________________

self = <chirc.tests.test_channel.TestPART object at 0x7ff861652630>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8616520b8>

    def test_channel_part9(self, irc_session):
        """
        Twenty clients connect to the server, join a channel, then leave it,
        then join it again, and leave it again.
        """
>       self._test_join_and_part_and_join_and_part(irc_session, 10)

tests/chirc/tests/test_channel.py:318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_channel.py:213: in _test_join_and_part_and_join_and_part
    clients = irc_session.connect_clients(numclients, join_channel = "#test")
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8616520b8>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861652cc0>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________ TestPART.test_channel_part_nochannel1 _____________________

self = <chirc.tests.test_channel.TestPART object at 0x7ff861641668>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8615e80f0>

    def test_channel_part_nochannel1(self, irc_session):
        """
        A client connects to the server and tries to leave a channel
        the user is not in (furthermore, the channel doesn't exist)
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("PART #test")
    
        reply = irc_session.get_reply(client1, expect_code = replies.ERR_NOSUCHCHANNEL, expect_nick = "user1",
                               expect_nparams = 2, expect_short_params = ["#test"],
>                              long_param_re = "No such channel")

tests/chirc/tests/test_channel.py:333: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:356: in get_reply
    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)
tests/chirc/tests/common.py:438: in verify_reply
    long_param_re = long_param_re, long_param_values = long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8615e80f0>, a = '421'
b = '403'
explanation = 'Expected command 403, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 PART :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8615e82e8>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command 403, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 PART :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________ TestPART.test_channel_part_nochannel2 _____________________

self = <chirc.tests.test_channel.TestPART object at 0x7ff86143fb00>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86143f0f0>

    def test_channel_part_nochannel2(self, irc_session):
        """
        A client connects to the server, joins the #test channel
        and leaves it. Then, the user tries to leave a channel
        again.
        """
    
>       clients = irc_session.connect_clients(1, join_channel = "#test")

tests/chirc/tests/test_channel.py:343: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86143f0f0>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86143f048>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
___________________ TestPART.test_channel_part_notonchannel1 ___________________

self = <chirc.tests.test_channel.TestPART object at 0x7ff8615d76a0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8614b9128>

    def test_channel_part_notonchannel1(self, irc_session):
        """
        Two clients connect to the server. The first one joins #test,
        and the second one tries to leave #test (the second client
        is not in the channel, but the channel exists)
        """
        client1 = irc_session.connect_user("user1", "User One")
        client2 = irc_session.connect_user("user2", "User Two")
    
        client1.send_cmd("JOIN #test")
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_channel.py:365: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8614b9128>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8614b9358>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
___________________ TestPART.test_channel_part_notonchannel2 ___________________

self = <chirc.tests.test_channel.TestPART object at 0x7ff8616c16a0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8616c1860>

    def test_channel_part_notonchannel2(self, irc_session):
        """
        Two clients connect to the server and both join #test.
        The first one leaves the channel, and then tries to leave
        again.
        """
>       clients = irc_session.connect_clients(2, join_channel = "#test")

tests/chirc/tests/test_channel.py:380: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8616c1860>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8616c1f28>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
______________________ TestPART.test_channel_part_params _______________________

self = <chirc.tests.test_channel.TestPART object at 0x7ff861506f60>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861506940>

    def test_channel_part_params(self, irc_session):
        """
        Test ERR_NEEDMOREPARAMS reply
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("PART")
    
        irc_session.get_ERR_NEEDMOREPARAMS_reply(client1,
>                                                expect_nick="user1", expect_cmd="PART")

tests/chirc/tests/test_channel.py:401: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:364: in get_ERR_NEEDMOREPARAMS_reply
    long_param_re = "Not enough parameters")
tests/chirc/tests/common.py:356: in get_reply
    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)
tests/chirc/tests/common.py:438: in verify_reply
    long_param_re = long_param_re, long_param_values = long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861506940>, a = '421'
b = '461'
explanation = 'Expected command 461, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 PART :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861506a58>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command 461, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 PART :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestTOPIC.test_topic01 ____________________________

self = <chirc.tests.test_channel.TestTOPIC object at 0x7ff8616e4e10>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8616e4470>

    def test_topic01(self, irc_session):
        """
        A client connects to the server, joins #test and sets the channel topic
        """
    
        topic = "This is the channel's topic"
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("JOIN #test")
    
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_channel.py:418: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8616e4470>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8616e4320>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestTOPIC.test_topic02 ____________________________

self = <chirc.tests.test_channel.TestTOPIC object at 0x7ff861652898>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8616525c0>

    def test_topic02(self, irc_session):
        """
        A client connects to the server, joins #test, sets the channel topic,
        and then asks for the topic.
        """
    
        topic = "This is the channel's topic"
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("JOIN #test")
    
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_channel.py:437: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8616525c0>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861652da0>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestTOPIC.test_topic03 ____________________________

self = <chirc.tests.test_channel.TestTOPIC object at 0x7ff8616af2b0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8616af208>

    def test_topic03(self, irc_session):
        """
        A client connects to the server, joins #test and then asks for the topic
        (but no topic has been set)
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("JOIN #test")
    
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_channel.py:460: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8616af208>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8616afc18>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestTOPIC.test_topic04 ____________________________

self = <chirc.tests.test_channel.TestTOPIC object at 0x7ff86148e550>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86148e588>

    def test_topic04(self, irc_session):
        """
        A client connects to the server and asks for the topic of a channel
        that does not exists.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("TOPIC #test")
    
        reply = irc_session.get_reply(client1, expect_code = replies.ERR_NOTONCHANNEL, expect_nick = "user1",
                               expect_nparams = 2, expect_short_params = ["#test"],
>                              long_param_re = "You're not on that channel")

tests/chirc/tests/test_channel.py:481: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:356: in get_reply
    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)
tests/chirc/tests/common.py:438: in verify_reply
    long_param_re = long_param_re, long_param_values = long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86148e588>, a = '421'
b = '442'
explanation = 'Expected command 442, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 TOPIC :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86148e4a8>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command 442, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 TOPIC :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestTOPIC.test_topic05 ____________________________

self = <chirc.tests.test_channel.TestTOPIC object at 0x7ff86160b278>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86160b4e0>

    def test_topic05(self, irc_session):
        """
        A client connects to the server and tries to set the topic of a channel
        that does not exists.
        """
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("TOPIC #test :This is the channel's topic")
    
        reply = irc_session.get_reply(client1, expect_code = replies.ERR_NOTONCHANNEL, expect_nick = "user1",
                               expect_nparams = 2, expect_short_params = ["#test"],
>                              long_param_re = "You're not on that channel")

tests/chirc/tests/test_channel.py:495: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:356: in get_reply
    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)
tests/chirc/tests/common.py:438: in verify_reply
    long_param_re = long_param_re, long_param_values = long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86160b4e0>, a = '421'
b = '442'
explanation = 'Expected command 442, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 TOPIC :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86160b630>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command 442, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 TOPIC :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestTOPIC.test_topic06 ____________________________

self = <chirc.tests.test_channel.TestTOPIC object at 0x7ff861502a20>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861502860>

    def test_topic06(self, irc_session):
        """
        Two clients connect to the server. The first one joins #test, the
        second one does not. The second one tries to ask for the channel topic.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
        client2 = irc_session.connect_user("user2", "User Two")
    
        client1.send_cmd("JOIN #test")
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_channel.py:508: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861502860>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8616de668>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestTOPIC.test_topic07 ____________________________

self = <chirc.tests.test_channel.TestTOPIC object at 0x7ff8615d0390>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8615d0240>

    def test_topic07(self, irc_session):
        """
        Two clients connect to the server. The first one joins #test and sets
        the channel topic. The second one does not join the channel, but
        tries to ask for the channel topic.
        """
        client1 = irc_session.connect_user("user1", "User One")
        client2 = irc_session.connect_user("user2", "User Two")
    
        topic = "This is the channel's topic"
        client1.send_cmd("JOIN #test")
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_channel.py:527: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8615d0240>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8615d0160>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestTOPIC.test_topic08 ____________________________

self = <chirc.tests.test_channel.TestTOPIC object at 0x7ff861667c18>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861667ba8>

    def test_topic08(self, irc_session):
        """
        Two clients connect to the server. The first one joins #test and sets
        the channel topic. The second one joins after that, and should receive
        the topic when joining.
        """
        client1 = irc_session.connect_user("user1", "User One")
        client2 = irc_session.connect_user("user2", "User Two")
    
        topic = "This is the channel's topic"
        client1.send_cmd("JOIN #test")
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_channel.py:548: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861667ba8>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861667860>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestTOPIC.test_topic09 ____________________________

self = <chirc.tests.test_channel.TestTOPIC object at 0x7ff8615bbbe0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8615bb9e8>

    def test_topic09(self, irc_session):
        """
        Ten clients connect to the server and join #test. The first
        user changes the topic of the channel. Everyone should
        receive the relay of the topic.
        """
    
>       clients = irc_session.connect_clients(10, join_channel = "#test")

tests/chirc/tests/test_channel.py:563: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8615bb9e8>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861511400>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestTOPIC.test_topic10 ____________________________

self = <chirc.tests.test_channel.TestTOPIC object at 0x7ff8614ae0b8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8614ae7b8>

    def test_topic10(self, irc_session):
        """
        Ten clients connect to the server. The first one joins #test
        and sets the channel topic. The remaining nine then join
        the channel, and should all receive the topic when joining
        """
        clients = irc_session.connect_clients(10)
    
        nick1, client1 = clients[0]
    
        topic = "This is the channel's topic"
        client1.send_cmd("JOIN #test")
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_channel.py:586: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8614ae7b8>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8616de668>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestTOPIC.test_topic_params __________________________

self = <chirc.tests.test_channel.TestTOPIC object at 0x7ff8615936a0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861593a20>

    def test_topic_params(self, irc_session):
        """
        Test ERR_NEEDMOREPARAMS reply
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("TOPIC")
    
        irc_session.get_ERR_NEEDMOREPARAMS_reply(client1,
>                                                expect_nick="user1", expect_cmd="TOPIC")

tests/chirc/tests/test_channel.py:605: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:364: in get_ERR_NEEDMOREPARAMS_reply
    long_param_re = "Not enough parameters")
tests/chirc/tests/common.py:356: in get_reply
    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)
tests/chirc/tests/common.py:438: in verify_reply
    long_param_re = long_param_re, long_param_values = long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861593a20>, a = '421'
b = '461'
explanation = 'Expected command 461, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 TOPIC :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861593cf8>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command 461, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 TOPIC :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestNAMES.test_names1 _____________________________

self = <chirc.tests.test_channel.TestNAMES object at 0x7ff861570128>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861570438>

    def test_names1(self, irc_session):
        """
        Connects nine users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators):
    
        #test1: @user1, user2, user3
        #test2: @user4, user5, user6
        #test3: @user7, user8, user9
    
        This test verifies that the correct RPL_NAMREPLY and RPL_ENDOFNAMES
        replies are sent when each of the users joins a channel.
        """
>       irc_session.connect_and_join_channels(channels1, test_names = True)

tests/chirc/tests/test_channel.py:671: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861570438>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8615705c0>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestNAMES.test_names2 _____________________________

self = <chirc.tests.test_channel.TestNAMES object at 0x7ff8614d2eb8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8614d2b70>

    def test_names2(self, irc_session):
        """
        Connects eleven users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators):
    
        #test1: @user1, user2, user3
        #test2: @user4, user5, user6
        #test3: @user7, user8, user9
    
        Not in a channel: user10, user11
    
        This test verifies that the correct RPL_NAMREPLY and RPL_ENDOFNAMES
        replies are sent when each of the users joins a channel.
        """
>       irc_session.connect_and_join_channels(channels2, test_names = True)

tests/chirc/tests/test_channel.py:689: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8614d2b70>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8614d2198>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestNAMES.test_names3 _____________________________

self = <chirc.tests.test_channel.TestNAMES object at 0x7ff8615d05c0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861667c50>

    def test_names3(self, irc_session):
        """
        Connects eleven users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators, and + denotes a user with voice privileges):
    
        #test1: @user1, user2, user3
        #test2: @user2
        #test3: @user3, @user4, user5, user6
        #test4: @user7, +user8, +user9, user1, user2
        #test5: @user1, @user5
    
        Not in a channel: user10, user11
    
        This test verifies that the correct RPL_NAMREPLY and RPL_ENDOFNAMES
        replies are sent when each of the users joins a channel.
        """
>       irc_session.connect_and_join_channels(channels3, test_names = True)

tests/chirc/tests/test_channel.py:709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861667c50>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86150c518>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestNAMES.test_names4 _____________________________

self = <chirc.tests.test_channel.TestNAMES object at 0x7ff8614eb198>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8614eb6a0>

    def test_names4(self, irc_session):
        """
        Connects nine users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators):
    
        #test1: @user1, user2, user3
        #test2: @user4, user5, user6
        #test3: @user7, user8, user9
    
        This test send a NAMES command for each of the channels and verifies
        the replies.
        """
>       users = irc_session.connect_and_join_channels(channels1, test_names = True)

tests/chirc/tests/test_channel.py:726: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8614eb6a0>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8614eb048>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestNAMES.test_names5 _____________________________

self = <chirc.tests.test_channel.TestNAMES object at 0x7ff8613e1f60>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8613e1e10>

    def test_names5(self, irc_session):
        """
        Connects eleven users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators):
    
        #test1: @user1, user2, user3
        #test2: @user4, user5, user6
        #test3: @user7, user8, user9
    
        Not in a channel: user10, user11
    
        This test send a NAMES command for each of the channels and verifies
        the replies.
        """
>       users = irc_session.connect_and_join_channels(channels2, test_names = True)

tests/chirc/tests/test_channel.py:746: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8613e1e10>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8616dec50>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestNAMES.test_names6 _____________________________

self = <chirc.tests.test_channel.TestNAMES object at 0x7ff8615d4400>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8615cf278>

    def test_names6(self, irc_session):
        """
        Connects eleven users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators, and + denotes a user with voice privileges):
    
        #test1: @user1, user2, user3
        #test2: @user2
        #test3: @user3, @user4, user5, user6
        #test4: @user7, +user8, +user9, user1, user2
        #test5: @user1, @user5
    
        Not in a channel: user10, user11
    
        This test send a NAMES command for each of the channels and verifies
        the replies.
        """
>       users = irc_session.connect_and_join_channels(channels3, test_names = True)

tests/chirc/tests/test_channel.py:768: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8615cf278>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8615cfe48>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestNAMES.test_names7 _____________________________

self = <chirc.tests.test_channel.TestNAMES object at 0x7ff8614102e8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861410668>

    def test_names7(self, irc_session):
        """
        Connects nine users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators):
    
        #test1: @user1, user2, user3
        #test2: @user4, user5, user6
        #test3: @user7, user8, user9
    
        This test send a NAMES command without a parameter and verifies
        the replies.
        """
>       users = irc_session.connect_and_join_channels(channels1, test_names = True)

tests/chirc/tests/test_channel.py:787: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861410668>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861410780>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestNAMES.test_names8 _____________________________

self = <chirc.tests.test_channel.TestNAMES object at 0x7ff861430cf8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8614307b8>

    def test_names8(self, irc_session):
        """
        Connects eleven users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators):
    
        #test1: @user1, user2, user3
        #test2: @user4, user5, user6
        #test3: @user7, user8, user9
    
        Not in a channel: user10, user11
    
        This test send a NAMES command without a parameter and verifies
        the replies.
        """
>       users = irc_session.connect_and_join_channels(channels2, test_names = True)

tests/chirc/tests/test_channel.py:807: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8614307b8>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861430048>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestNAMES.test_names9 _____________________________

self = <chirc.tests.test_channel.TestNAMES object at 0x7ff86148e5c0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8614bae80>

    def test_names9(self, irc_session):
        """
        Connects eleven users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators, and + denotes a user with voice privileges):
    
        #test1: @user1, user2, user3
        #test2: @user2
        #test3: @user3, @user4, user5, user6
        #test4: @user7, +user8, +user9, user1, user2
        #test5: @user1, @user5
    
        Not in a channel: user10, user11
    
        This test send a NAMES command without a parameter and verifies
        the replies.
        """
>       users = irc_session.connect_and_join_channels(channels3, test_names = True)

tests/chirc/tests/test_channel.py:829: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8614bae80>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8614bada0>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestNAMES.test_names10 ____________________________

self = <chirc.tests.test_channel.TestNAMES object at 0x7ff8614cfc18>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8614cfef0>

    def test_names10(self, irc_session):
        """
        Connects five users to the server, with none of them joining any channels.
    
        This test send a NAMES command without a parameter and verifies
        the replies.
        """
        users = irc_session.connect_and_join_channels(channels4, test_names = True)
    
>       self._test_names_all(irc_session, channels4, users["user1"], "user1")

tests/chirc/tests/test_channel.py:843: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_channel.py:651: in _test_names_all
    irc_session.verify_names(client, nick, expect_channel = "*", expect_names = no_channel)
tests/chirc/tests/common.py:645: in verify_names
    expect_nparams = 3)
tests/chirc/tests/common.py:356: in get_reply
    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)
tests/chirc/tests/common.py:438: in verify_reply
    long_param_re = long_param_re, long_param_values = long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8614cfef0>, a = '421'
b = '353'
explanation = 'Expected command 353, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 NAMES :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8614cfac8>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command 353, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 NAMES :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestNAMES.test_names11 ____________________________

self = <chirc.tests.test_channel.TestNAMES object at 0x7ff861604978>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8616045f8>

    def test_names11(self, irc_session):
        """
        Connects nine users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators):
    
        #test1: @user1, user2, user3
        #test2: @user4, user5, user6
        #test3: @user7, user8, user9
    
        user1 then sends a NAMES command for a channel that does not
        exist
        """
    
>       users = irc_session.connect_and_join_channels(channels1, test_names = True)

tests/chirc/tests/test_channel.py:861: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8616045f8>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861604780>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_____________________________ TestLIST.test_list1 ______________________________

self = <chirc.tests.test_channel.TestLIST object at 0x7ff86160b390>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86169a198>

    def test_list1(self, irc_session):
        """
        Connects nine users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators):
    
        #test1: @user1, user2, user3
        #test2: @user4, user5, user6
        #test3: @user7, user8, user9
    
        user1 then sends a LIST command.
        """
>       users = irc_session.connect_and_join_channels(channels1)

tests/chirc/tests/test_channel.py:926: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86169a198>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86169a278>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_____________________________ TestLIST.test_list2 ______________________________

self = <chirc.tests.test_channel.TestLIST object at 0x7ff8616a9208>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8616a9080>

    def test_list2(self, irc_session):
        """
        Connects eleven users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators):
    
        #test1: @user1, user2, user3
        #test2: @user4, user5, user6
        #test3: @user7, user8, user9
    
        Not in a channel: user10, user11
    
        user1 then sends a LIST command.
        """
>       users = irc_session.connect_and_join_channels(channels2)

tests/chirc/tests/test_channel.py:945: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8616a9080>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8616a9198>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_____________________________ TestLIST.test_list3 ______________________________

self = <chirc.tests.test_channel.TestLIST object at 0x7ff8615b3630>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8615b3b00>

    def test_list3(self, irc_session):
        """
        Connects eleven users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators, and + denotes a user with voice privileges):
    
        #test1: @user1, user2, user3
        #test2: @user2
        #test3: @user3, @user4, user5, user6
        #test4: @user7, +user8, +user9, user1, user2
        #test5: @user1, @user5
    
        Not in a channel: user10, user11
    
        user1 then sends a LIST command.
        """
>       users = irc_session.connect_and_join_channels(channels3)

tests/chirc/tests/test_channel.py:966: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8615b3b00>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8614329e8>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_____________________________ TestLIST.test_list4 ______________________________

self = <chirc.tests.test_channel.TestLIST object at 0x7ff8615be400>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8615be908>

    def test_list4(self, irc_session):
        """
        Connects five users to the server, with none of them joining any channels.
    
        user1 then sends a LIST command.
        """
        users = irc_session.connect_and_join_channels(channels4)
    
>       self._test_list(irc_session, channels4, users["user1"], "user1")

tests/chirc/tests/test_channel.py:979: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_channel.py:910: in _test_list
    expect_nparams = 1, long_param_re = "End of LIST")
tests/chirc/tests/common.py:356: in get_reply
    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)
tests/chirc/tests/common.py:438: in verify_reply
    long_param_re = long_param_re, long_param_values = long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8615be908>, a = '421'
b = '323'
explanation = 'Expected command 323, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 LIST :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8615be6a0>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command 323, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 LIST :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_____________________________ TestLIST.test_list5 ______________________________

self = <chirc.tests.test_channel.TestLIST object at 0x7ff8614d7ba8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8614d7860>

    def test_list5(self, irc_session):
        """
        Connects eleven users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators):
    
        #test1: @user1, user2, user3
        #test2: @user4, user5, user6
        #test3: @user7, user8, user9
    
        Not in a channel: user10, user11
    
        The operator in each channel then sets the topic for the
        channel. user10 sends a LIST command, and the replies
        should include the topics of the channels.
        """
>       users = irc_session.connect_and_join_channels(channels2)

tests/chirc/tests/test_channel.py:999: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8614d7860>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8614d70f0>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
______________________________ TestWHO.test_who1 _______________________________

self = <chirc.tests.test_channel.TestWHO object at 0x7ff8614baf28>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8614ba080>

    def test_who1(self, irc_session):
        """
        Connects nine users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators):
    
        #test1: @user1, user2, user3
        #test2: @user4, user5, user6
        #test3: @user7, user8, user9
    
        user1 then sends a WHO for each channel.
        """
>       users = irc_session.connect_and_join_channels(channels1)

tests/chirc/tests/test_channel.py:1134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8614ba080>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8614ba518>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
______________________________ TestWHO.test_who2 _______________________________

self = <chirc.tests.test_channel.TestWHO object at 0x7ff8616b69e8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8616b6dd8>

    def test_who2(self, irc_session):
        """
        Connects nine users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators):
    
        #test1: @user1, user2, user3
        #test2: @user4, user5, user6
        #test3: @user7, user8, user9
    
        user1, user4, and user7 each send a "WHO *" command.
        """
>       users = irc_session.connect_and_join_channels(channels1)

tests/chirc/tests/test_channel.py:1153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8616b6dd8>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8616b6518>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
______________________________ TestWHO.test_who3 _______________________________

self = <chirc.tests.test_channel.TestWHO object at 0x7ff8616cf630>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8616cfac8>

    def test_who3(self, irc_session):
        """
        Connects eleven users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators):
    
        #test1: @user1, user2, user3
        #test2: @user4, user5, user6
        #test3: @user7, user8, user9
    
        Not in a channel: user10, user11
    
        user1, user4, user7, and user10 each send a "WHO *" command.
        """
>       users = irc_session.connect_and_join_channels(channels2)

tests/chirc/tests/test_channel.py:1174: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8616cfac8>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8616cfc18>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
______________________________ TestWHO.test_who4 _______________________________

self = <chirc.tests.test_channel.TestWHO object at 0x7ff8615a02e8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8615a0630>

    def test_who4(self, irc_session):
        """
        Connects eleven users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators, and + denotes a user with voice privileges):
    
        #test1: @user1, user2, user3
        #test2: @user2
        #test3: @user3, @user4, user5, user6
        #test4: @user7, +user8, +user9, user1, user2
        #test5: @user1, @user5
    
        Not in a channel: user10, user11
    
        user1 then sends a WHO for each channel.
        """
>       users = irc_session.connect_and_join_channels(channels3)

tests/chirc/tests/test_channel.py:1198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8615a0630>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8615a0668>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
______________________________ TestWHO.test_who5 _______________________________

self = <chirc.tests.test_channel.TestWHO object at 0x7ff8614cf7f0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8614cff28>

    def test_who5(self, irc_session):
        """
        Connects nine users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators):
    
        #test1: @user1, user2, user3
        #test2: @user4, user5, user6
        #test3: @user7, user8, user9
    
        user4, user5, and user7 mark themselves as away. user4 and user6 become
        IRCops. user1 then sends a WHO for each channel.
        """
        aways = ["user4", "user5", "user7"]
        ircops = ["user4", "user6"]
    
>       users = irc_session.connect_and_join_channels(channels1, aways, ircops)

tests/chirc/tests/test_channel.py:1224: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8614cff28>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8614cf4a8>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
______________________________ TestWHO.test_who6 _______________________________

self = <chirc.tests.test_channel.TestWHO object at 0x7ff86149e828>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86149e5c0>

    def test_who6(self, irc_session):
        """
        Connects eleven users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators, and + denotes a user with voice privileges):
    
        #test1: @user1, user2, user3
        #test2: @user2
        #test3: @user3, @user4, user5, user6
        #test4: @user7, +user8, +user9, user1, user2
        #test5: @user1, @user5
    
        Not in a channel: user10, user11
    
        user4, user8, and user10 mark themselves as away. user8, user9, user10,
        and user11 become IRCops. user1 then sends a WHO for each channel.
        """
        aways = ["user4", "user8", "user10"]
        ircops = ["user8", "user9", "user10", "user11"]
    
>       users = irc_session.connect_and_join_channels(channels3, aways, ircops)

tests/chirc/tests/test_channel.py:1252: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86149e5c0>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86149e518>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_______________ TestChannelUPDATEAssignment2.test_update1b_nick ________________

self = <chirc.tests.test_channel.TestChannelUPDATEAssignment2 object at 0x7ff86145cef0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86145ca90>

    def test_update1b_nick(self, irc_session):
        """
        Ensure that nick changes are relayed in a channel.
        """
>       clients = irc_session.connect_clients(5, join_channel = "#test")

tests/chirc/tests/test_channel.py:1268: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86145ca90>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86145c4a8>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_______________ TestChannelUPDATEAssignment2.test_update1b_quit1 _______________

self = <chirc.tests.test_channel.TestChannelUPDATEAssignment2 object at 0x7ff8614ac898>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8614ac5c0>

    def test_update1b_quit1(self, irc_session):
        """
        Ensure that a user's QUIT is relayed to the channels the user is in.
        """
>       clients = irc_session.connect_clients(5, join_channel = "#test")

tests/chirc/tests/test_channel.py:1282: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8614ac5c0>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861425f60>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_______________ TestChannelUPDATEAssignment2.test_update1b_quit2 _______________

self = <chirc.tests.test_channel.TestChannelUPDATEAssignment2 object at 0x7ff8614d70f0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8615be0f0>

    def test_update1b_quit2(self, irc_session):
        """
        Ensure that a user's QUIT (with a custom message) is relayed to the
        channels the user is in.
        """
>       clients = irc_session.connect_clients(5, join_channel = "#test")

tests/chirc/tests/test_channel.py:1302: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8615be0f0>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8615be470>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_______________________ TestLUSERS.test_lusers_channels1 _______________________

self = <chirc.tests.test_lusers_motd.TestLUSERS object at 0x7ff861604940>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861427e80>

    @pytest.mark.category("UPDATE_ASSIGNMENT2")
    def test_lusers_channels1(self, irc_session):
        """
        Test calling LUSERS with a server with nine users (user1-user9)
        where the users are in the following channels:
    
        #test1: user1, user2, user3
        #test2: user4, user5, user6
        #test3: user7, user8, user9
        """
    
>       users = irc_session.connect_and_join_channels(channels1)

tests/chirc/tests/test_lusers_motd.py:205: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861427e80>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86169a0b8>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_______________________ TestLUSERS.test_lusers_channels2 _______________________

self = <chirc.tests.test_lusers_motd.TestLUSERS object at 0x7ff8616b6898>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8614c5208>

    @pytest.mark.category("UPDATE_ASSIGNMENT2")
    def test_lusers_channels2(self, irc_session):
        """
        Test calling LUSERS with a server with eleven users (user1-user11)
        where the users are in the following channels:
    
        #test1: user1, user2, user3
        #test2: user4, user5, user6
        #test3: user7, user8, user9
    
        Not in a channel: user10, user11
        """
    
>       users = irc_session.connect_and_join_channels(channels2)

tests/chirc/tests/test_lusers_motd.py:228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8614c5208>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8614c5be0>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_______________________ TestLUSERS.test_lusers_channels3 _______________________

self = <chirc.tests.test_lusers_motd.TestLUSERS object at 0x7ff8615be5c0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8615be358>

    @pytest.mark.category("UPDATE_ASSIGNMENT2")
    def test_lusers_channels3(self, irc_session):
        """
        Test calling LUSERS with a server with eleven users (user1-user11)
        where the users are in the following channels:
    
        #test1: user1, user2, user3
        #test2: user2
        #test3: user3, user4, user5, user6
        #test4: user7, user8, user9, user1, user2
        #test5: user1, user5
    
        Not in a channel: user10, user11
        """
    
>       users = irc_session.connect_and_join_channels(channels3)

tests/chirc/tests/test_lusers_motd.py:253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8615be358>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8612e01d0>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
________________________ TestLUSERS.test_lusers_ircops1 ________________________

self = <chirc.tests.test_lusers_motd.TestLUSERS object at 0x7ff861425198>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861425a90>

    @pytest.mark.category("UPDATE_ASSIGNMENT2")
    def test_lusers_ircops1(self, irc_session):
        """
        Test calling LUSERS explicitly with four clients,
        one of which is a IRCop.
        """
    
        clients = irc_session.connect_clients(4)
    
        nick1, client1 = clients[0]
        nick2, client2 = clients[1]
    
        client1.send_cmd("OPER user1 %s" % irc_session.oper_password)
        irc_session.get_reply(client1, expect_code = replies.RPL_YOUREOPER)
    
        client2.send_cmd("LUSERS")
        irc_session.verify_lusers(client2, nick2,
                                  expect_users = 4,
                                  expect_ops = 1,
                                  expect_unknown = 0,
                                  expect_channels = 0,
>                                 expect_clients = 4)

tests/chirc/tests/test_lusers_motd.py:284: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:475: in verify_lusers
    self.verify_reply(reply, expect_short_params = [expect_ops])
tests/chirc/tests/common.py:438: in verify_reply
    long_param_re = long_param_re, long_param_values = long_param_values)
tests/chirc/tests/common.py:405: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861425a90>, a = '0'
b = '1'
explanation = 'Expected parameter #2 to be 1, got 0 instead\n\nMESSAGE: |||:jusot.com 252 user2 0 :operator(s) online|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861425780>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected parameter #2 to be 1, got 0 instead
E       
E       MESSAGE: |||:jusot.com 252 user2 0 :operator(s) online|||

tests/chirc/tests/common.py:44: AssertionError
________________________ TestLUSERS.test_lusers_ircops2 ________________________

self = <chirc.tests.test_lusers_motd.TestLUSERS object at 0x7ff8615cf780>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8616bd898>

    @pytest.mark.category("UPDATE_ASSIGNMENT2")
    def test_lusers_ircops2(self, irc_session):
        """
        Test calling LUSERS explicitly with four clients,
        two of which are IRCops.
        """
    
        clients = irc_session.connect_clients(4)
    
        nick1, client1 = clients[0]
        nick2, client2 = clients[1]
        nick3, client3 = clients[2]
    
        for nick, client in clients:
            client.send_cmd("LUSERS")
            irc_session.verify_lusers(client, nick,
                                      expect_users = 4,
                                      expect_ops = 0,
                                      expect_unknown = 0,
                                      expect_channels = 0,
                                      expect_clients = 4)
    
        client1.send_cmd("OPER user1 %s" % irc_session.oper_password)
        irc_session.get_reply(client1, expect_code = replies.RPL_YOUREOPER)
    
        for nick, client in clients:
            client.send_cmd("LUSERS")
            irc_session.verify_lusers(client, nick,
                                      expect_users = 4,
                                      expect_ops = 1,
                                      expect_unknown = 0,
                                      expect_channels = 0,
>                                     expect_clients = 4)

tests/chirc/tests/test_lusers_motd.py:318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:475: in verify_lusers
    self.verify_reply(reply, expect_short_params = [expect_ops])
tests/chirc/tests/common.py:438: in verify_reply
    long_param_re = long_param_re, long_param_values = long_param_values)
tests/chirc/tests/common.py:405: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8616bd898>, a = '0'
b = '1'
explanation = 'Expected parameter #2 to be 1, got 0 instead\n\nMESSAGE: |||:jusot.com 252 user1 0 :operator(s) online|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8616bd828>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected parameter #2 to be 1, got 0 instead
E       
E       MESSAGE: |||:jusot.com 252 user1 0 :operator(s) online|||

tests/chirc/tests/common.py:44: AssertionError
__________________ TestLUSERS.test_lusers_channels_and_ircops __________________

self = <chirc.tests.test_lusers_motd.TestLUSERS object at 0x7ff8614745c0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861474748>

    @pytest.mark.category("UPDATE_ASSIGNMENT2")
    def test_lusers_channels_and_ircops(self, irc_session):
        """
        Test calling LUSERS with a server with eleven users (user1-user11)
        where the users are in the following channels:
    
        #test1: user1, user2, user3
        #test2: user2
        #test3: user3, user4, user5, user6
        #test4: user7, user8, user9, user1, user2
        #test5: user1, user5
    
        Not in a channel: user10, user11
    
        Additionally, user2 and user5 are IRCops.
        """
    
>       users = irc_session.connect_and_join_channels(channels3, ircops = ["user2", "user5"])

tests/chirc/tests/test_lusers_motd.py:349: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861474748>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861474a58>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_____________________________ TestMOTD.test_motd1 ______________________________

self = <chirc.tests.test_lusers_motd.TestMOTD object at 0x7ff86151c5f8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86151c438>

        def test_motd1(self, irc_session):
            """
            Test calling MOTD where the MOTD file contains the following
            (newlines are shown as "\n" and the end of the file as <EOF>):
    
            AAA\n
            BBB\n
            CCC\n
            DDD<EOF>
    
            """
    
            client1 = irc_session.connect_user("user1", "User One")
    
            motd = """AAA
    BBB
    CCC
    DDD"""
    
            motdf = open(irc_session.tmpdir + "/motd.txt", "w")
            motdf.write(motd)
            motdf.close()
    
            client1.send_cmd("MOTD")
>           irc_session.verify_motd(client1, "user1", expect_motd = motd)

tests/chirc/tests/test_lusers_motd.py:387: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:508: in verify_motd
    expect_nparams = 1, long_param_re = "- .* Message of the day - ")
tests/chirc/tests/common.py:356: in get_reply
    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)
tests/chirc/tests/common.py:438: in verify_reply
    long_param_re = long_param_re, long_param_values = long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86151c438>, a = '422'
b = '375'
explanation = 'Expected command 375, got 422 instead\n\nMESSAGE: |||:jusot.com 422 user1 :MOTD File is missing|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86151c6a0>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command 375, got 422 instead
E       
E       MESSAGE: |||:jusot.com 422 user1 :MOTD File is missing|||

tests/chirc/tests/common.py:44: AssertionError
_____________________________ TestMOTD.test_motd2 ______________________________

self = <chirc.tests.test_lusers_motd.TestMOTD object at 0x7ff861445208>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861445710>

        def test_motd2(self, irc_session):
            """
            Test calling MOTD where the MOTD file contains the following
            (newlines are shown as "\n" and the end of the file as <EOF>):
    
            AAA\n
            BBB\n
            CCC\n
            DDD\n
            <EOF>
    
            """
    
            client1 = irc_session.connect_user("user1", "User One")
    
            motd = """AAA
    BBB
    CCC
    DDD
    """
    
            motdf = open(irc_session.tmpdir + "/motd.txt", "w")
            motdf.write(motd)
            motdf.close()
    
            client1.send_cmd("MOTD")
>           irc_session.verify_motd(client1, "user1", expect_motd = motd)

tests/chirc/tests/test_lusers_motd.py:415: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:508: in verify_motd
    expect_nparams = 1, long_param_re = "- .* Message of the day - ")
tests/chirc/tests/common.py:356: in get_reply
    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)
tests/chirc/tests/common.py:438: in verify_reply
    long_param_re = long_param_re, long_param_values = long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861445710>, a = '422'
b = '375'
explanation = 'Expected command 375, got 422 instead\n\nMESSAGE: |||:jusot.com 422 user1 :MOTD File is missing|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861445e48>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command 375, got 422 instead
E       
E       MESSAGE: |||:jusot.com 422 user1 :MOTD File is missing|||

tests/chirc/tests/common.py:44: AssertionError
__________________________ TestMODE.test_user_mode02 ___________________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff861465390>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8614b14a8>

    def test_user_mode02(self, irc_session):
        """
        The user tries to remove IRCop status from itself using MODE
        (and the user is not already an IRCop) A non-IRCop can't
        modify the the 'o' user mode, but since the user isn't
        an IRCop, requesting -o has no effect, and the MODE
        is relayed back (because it is accurate: the user is not
        an IRCop)
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
>       irc_session.set_user_mode(client1, "user1", "user1", "-o")

tests/chirc/tests/test_modes.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:276: in set_user_mode
    long_param_re = mode)
tests/chirc/tests/common.py:370: in get_message
    msg = client.get_message()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.client.ChircClient object at 0x7ff8614b1400>

    def get_message(self):
        msg = self.client.read_until(str.encode("\r\n"), timeout=self.msg_timeout)
        msg = msg.decode()
        if msg[-2:] != "\r\n":
>           raise ReplyTimeoutException(msg)
E           chirc.types.ReplyTimeoutException

tests/chirc/client.py:37: ReplyTimeoutException
__________________________ TestMODE.test_user_mode05 ___________________________

self = <chirc.tests.common.IRCSession object at 0x7ff861465eb8>
client = <chirc.client.ChircClient object at 0x7ff861465a20>
expect_code = '501', expect_nick = 'user1', expect_nparams = 1
expect_short_params = None, long_param_re = 'Unknown MODE flag'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
>           msg = client.get_message()

tests/chirc/tests/common.py:340: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.client.ChircClient object at 0x7ff861465a20>

    def get_message(self):
        msg = self.client.read_until(str.encode("\r\n"), timeout=self.msg_timeout)
        msg = msg.decode()
        if msg[-2:] != "\r\n":
>           raise ReplyTimeoutException(msg)
E           chirc.types.ReplyTimeoutException

tests/chirc/client.py:37: ReplyTimeoutException

During handling of the above exception, another exception occurred:

self = <chirc.tests.test_modes.TestMODE object at 0x7ff86159b1d0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861465eb8>

    def test_user_mode05(self, irc_session):
        """
        The user tries to set its "v" mode. This is a valid member status mode,
        but not a valid user mode. ERR_UMODEUNKNOWNFLAG should be returned.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
>       irc_session.set_user_mode(client1, "user1", "user1", "+v", expect_wrong_mode=True)

tests/chirc/tests/test_modes.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:271: in set_user_mode
    long_param_re = "Unknown MODE flag")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861465eb8>
client = <chirc.client.ChircClient object at 0x7ff861465a20>
expect_code = '501', expect_nick = 'user1', expect_nparams = 1
expect_short_params = None, long_param_re = 'Unknown MODE flag'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
            msg = client.get_message()
    
            if expect_timeout:
                pytest.fail("Was not expecting a reply, but got one:\n" + msg.raw(bookends=True))
        except EOFError:
            pytest.fail("Server closed connection unexpectedly. Possible segfault in server?")
        except ReplyTimeoutException as rte:
            if expect_timeout:
                return None
    
            if len(rte.bytes_received) == 0:
                failmsg = "Expected a reply but got none (no bytes received)"
            else:
                failmsg = "Expected a reply but did not get valid reply terminated with \\r\\n. Bytes received:\n|||{}|||".format(rte.bytes_received)
>           pytest.fail(failmsg)
E           Failed: Expected a reply but got none (no bytes received)

tests/chirc/tests/common.py:354: Failed
__________________________ TestMODE.test_user_mode06 ___________________________

self = <chirc.tests.common.IRCSession object at 0x7ff8613c1f28>
client = <chirc.client.ChircClient object at 0x7ff8613c1eb8>
expect_code = '501', expect_nick = 'user1', expect_nparams = 1
expect_short_params = None, long_param_re = 'Unknown MODE flag'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
>           msg = client.get_message()

tests/chirc/tests/common.py:340: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.client.ChircClient object at 0x7ff8613c1eb8>

    def get_message(self):
        msg = self.client.read_until(str.encode("\r\n"), timeout=self.msg_timeout)
        msg = msg.decode()
        if msg[-2:] != "\r\n":
>           raise ReplyTimeoutException(msg)
E           chirc.types.ReplyTimeoutException

tests/chirc/client.py:37: ReplyTimeoutException

During handling of the above exception, another exception occurred:

self = <chirc.tests.test_modes.TestMODE object at 0x7ff8613c1e10>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8613c1f28>

    def test_user_mode06(self, irc_session):
        """
        The user tries to unset its "v" mode. This is a valid member status mode,
        but not a valid user mode. ERR_UMODEUNKNOWNFLAG should be returned.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
>       irc_session.set_user_mode(client1, "user1", "user1", "-v", expect_wrong_mode=True)

tests/chirc/tests/test_modes.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:271: in set_user_mode
    long_param_re = "Unknown MODE flag")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8613c1f28>
client = <chirc.client.ChircClient object at 0x7ff8613c1eb8>
expect_code = '501', expect_nick = 'user1', expect_nparams = 1
expect_short_params = None, long_param_re = 'Unknown MODE flag'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
            msg = client.get_message()
    
            if expect_timeout:
                pytest.fail("Was not expecting a reply, but got one:\n" + msg.raw(bookends=True))
        except EOFError:
            pytest.fail("Server closed connection unexpectedly. Possible segfault in server?")
        except ReplyTimeoutException as rte:
            if expect_timeout:
                return None
    
            if len(rte.bytes_received) == 0:
                failmsg = "Expected a reply but got none (no bytes received)"
            else:
                failmsg = "Expected a reply but did not get valid reply terminated with \\r\\n. Bytes received:\n|||{}|||".format(rte.bytes_received)
>           pytest.fail(failmsg)
E           Failed: Expected a reply but got none (no bytes received)

tests/chirc/tests/common.py:354: Failed
__________________________ TestMODE.test_user_mode07 ___________________________

self = <chirc.tests.common.IRCSession object at 0x7ff8616a57b8>
client = <chirc.client.ChircClient object at 0x7ff8616a5518>
expect_code = '501', expect_nick = 'user1', expect_nparams = 1
expect_short_params = None, long_param_re = 'Unknown MODE flag'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
>           msg = client.get_message()

tests/chirc/tests/common.py:340: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.client.ChircClient object at 0x7ff8616a5518>

    def get_message(self):
        msg = self.client.read_until(str.encode("\r\n"), timeout=self.msg_timeout)
        msg = msg.decode()
        if msg[-2:] != "\r\n":
>           raise ReplyTimeoutException(msg)
E           chirc.types.ReplyTimeoutException

tests/chirc/client.py:37: ReplyTimeoutException

During handling of the above exception, another exception occurred:

self = <chirc.tests.test_modes.TestMODE object at 0x7ff861425ef0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8616a57b8>

    def test_user_mode07(self, irc_session):
        """
        The user tries to set its "t" mode. This is a valid channel mode,
        but not a valid user mode. ERR_UMODEUNKNOWNFLAG should be returned.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
>       irc_session.set_user_mode(client1, "user1", "user1", "+t", expect_wrong_mode=True)

tests/chirc/tests/test_modes.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:271: in set_user_mode
    long_param_re = "Unknown MODE flag")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8616a57b8>
client = <chirc.client.ChircClient object at 0x7ff8616a5518>
expect_code = '501', expect_nick = 'user1', expect_nparams = 1
expect_short_params = None, long_param_re = 'Unknown MODE flag'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
            msg = client.get_message()
    
            if expect_timeout:
                pytest.fail("Was not expecting a reply, but got one:\n" + msg.raw(bookends=True))
        except EOFError:
            pytest.fail("Server closed connection unexpectedly. Possible segfault in server?")
        except ReplyTimeoutException as rte:
            if expect_timeout:
                return None
    
            if len(rte.bytes_received) == 0:
                failmsg = "Expected a reply but got none (no bytes received)"
            else:
                failmsg = "Expected a reply but did not get valid reply terminated with \\r\\n. Bytes received:\n|||{}|||".format(rte.bytes_received)
>           pytest.fail(failmsg)
E           Failed: Expected a reply but got none (no bytes received)

tests/chirc/tests/common.py:354: Failed
__________________________ TestMODE.test_user_mode08 ___________________________

self = <chirc.tests.common.IRCSession object at 0x7ff861431d30>
client = <chirc.client.ChircClient object at 0x7ff861431da0>
expect_code = '501', expect_nick = 'user1', expect_nparams = 1
expect_short_params = None, long_param_re = 'Unknown MODE flag'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
>           msg = client.get_message()

tests/chirc/tests/common.py:340: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.client.ChircClient object at 0x7ff861431da0>

    def get_message(self):
        msg = self.client.read_until(str.encode("\r\n"), timeout=self.msg_timeout)
        msg = msg.decode()
        if msg[-2:] != "\r\n":
>           raise ReplyTimeoutException(msg)
E           chirc.types.ReplyTimeoutException

tests/chirc/client.py:37: ReplyTimeoutException

During handling of the above exception, another exception occurred:

self = <chirc.tests.test_modes.TestMODE object at 0x7ff861431438>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861431d30>

    def test_user_mode08(self, irc_session):
        """
        The user tries to unset its "t" mode. This is a valid channel mode,
        but not a valid user mode. ERR_UMODEUNKNOWNFLAG should be returned.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
>       irc_session.set_user_mode(client1, "user1", "user1", "-t", expect_wrong_mode=True)

tests/chirc/tests/test_modes.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:271: in set_user_mode
    long_param_re = "Unknown MODE flag")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861431d30>
client = <chirc.client.ChircClient object at 0x7ff861431da0>
expect_code = '501', expect_nick = 'user1', expect_nparams = 1
expect_short_params = None, long_param_re = 'Unknown MODE flag'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
            msg = client.get_message()
    
            if expect_timeout:
                pytest.fail("Was not expecting a reply, but got one:\n" + msg.raw(bookends=True))
        except EOFError:
            pytest.fail("Server closed connection unexpectedly. Possible segfault in server?")
        except ReplyTimeoutException as rte:
            if expect_timeout:
                return None
    
            if len(rte.bytes_received) == 0:
                failmsg = "Expected a reply but got none (no bytes received)"
            else:
                failmsg = "Expected a reply but did not get valid reply terminated with \\r\\n. Bytes received:\n|||{}|||".format(rte.bytes_received)
>           pytest.fail(failmsg)
E           Failed: Expected a reply but got none (no bytes received)

tests/chirc/tests/common.py:354: Failed
__________________________ TestMODE.test_user_mode09 ___________________________

self = <chirc.tests.common.IRCSession object at 0x7ff8614cf5c0>
client = <chirc.client.ChircClient object at 0x7ff8614cf668>
expect_code = '501', expect_nick = 'user1', expect_nparams = 1
expect_short_params = None, long_param_re = 'Unknown MODE flag'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
>           msg = client.get_message()

tests/chirc/tests/common.py:340: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.client.ChircClient object at 0x7ff8614cf668>

    def get_message(self):
        msg = self.client.read_until(str.encode("\r\n"), timeout=self.msg_timeout)
        msg = msg.decode()
        if msg[-2:] != "\r\n":
>           raise ReplyTimeoutException(msg)
E           chirc.types.ReplyTimeoutException

tests/chirc/client.py:37: ReplyTimeoutException

During handling of the above exception, another exception occurred:

self = <chirc.tests.test_modes.TestMODE object at 0x7ff8613f1748>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8614cf5c0>

    def test_user_mode09(self, irc_session):
        """
        The user tries to set its "z" mode. This is not a supported mode
        in chIRC, so ERR_UMODEUNKNOWNFLAG should be returned.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
>       irc_session.set_user_mode(client1, "user1", "user1", "+z", expect_wrong_mode=True)

tests/chirc/tests/test_modes.py:145: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:271: in set_user_mode
    long_param_re = "Unknown MODE flag")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8614cf5c0>
client = <chirc.client.ChircClient object at 0x7ff8614cf668>
expect_code = '501', expect_nick = 'user1', expect_nparams = 1
expect_short_params = None, long_param_re = 'Unknown MODE flag'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
            msg = client.get_message()
    
            if expect_timeout:
                pytest.fail("Was not expecting a reply, but got one:\n" + msg.raw(bookends=True))
        except EOFError:
            pytest.fail("Server closed connection unexpectedly. Possible segfault in server?")
        except ReplyTimeoutException as rte:
            if expect_timeout:
                return None
    
            if len(rte.bytes_received) == 0:
                failmsg = "Expected a reply but got none (no bytes received)"
            else:
                failmsg = "Expected a reply but did not get valid reply terminated with \\r\\n. Bytes received:\n|||{}|||".format(rte.bytes_received)
>           pytest.fail(failmsg)
E           Failed: Expected a reply but got none (no bytes received)

tests/chirc/tests/common.py:354: Failed
__________________________ TestMODE.test_user_mode10 ___________________________

self = <chirc.tests.common.IRCSession object at 0x7ff8614c5ac8>
client = <chirc.client.ChircClient object at 0x7ff8614c5e48>
expect_code = '501', expect_nick = 'user1', expect_nparams = 1
expect_short_params = None, long_param_re = 'Unknown MODE flag'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
>           msg = client.get_message()

tests/chirc/tests/common.py:340: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.client.ChircClient object at 0x7ff8614c5e48>

    def get_message(self):
        msg = self.client.read_until(str.encode("\r\n"), timeout=self.msg_timeout)
        msg = msg.decode()
        if msg[-2:] != "\r\n":
>           raise ReplyTimeoutException(msg)
E           chirc.types.ReplyTimeoutException

tests/chirc/client.py:37: ReplyTimeoutException

During handling of the above exception, another exception occurred:

self = <chirc.tests.test_modes.TestMODE object at 0x7ff8614c56a0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8614c5ac8>

    def test_user_mode10(self, irc_session):
        """
        The user tries to unset its "z" mode. This is not a supported mode
        in chIRC, so ERR_UMODEUNKNOWNFLAG should be returned.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
>       irc_session.set_user_mode(client1, "user1", "user1", "-z", expect_wrong_mode=True)

tests/chirc/tests/test_modes.py:155: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:271: in set_user_mode
    long_param_re = "Unknown MODE flag")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8614c5ac8>
client = <chirc.client.ChircClient object at 0x7ff8614c5e48>
expect_code = '501', expect_nick = 'user1', expect_nparams = 1
expect_short_params = None, long_param_re = 'Unknown MODE flag'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
            msg = client.get_message()
    
            if expect_timeout:
                pytest.fail("Was not expecting a reply, but got one:\n" + msg.raw(bookends=True))
        except EOFError:
            pytest.fail("Server closed connection unexpectedly. Possible segfault in server?")
        except ReplyTimeoutException as rte:
            if expect_timeout:
                return None
    
            if len(rte.bytes_received) == 0:
                failmsg = "Expected a reply but got none (no bytes received)"
            else:
                failmsg = "Expected a reply but did not get valid reply terminated with \\r\\n. Bytes received:\n|||{}|||".format(rte.bytes_received)
>           pytest.fail(failmsg)
E           Failed: Expected a reply but got none (no bytes received)

tests/chirc/tests/common.py:354: Failed
__________________________ TestMODE.test_user_mode11 ___________________________

self = <chirc.tests.common.IRCSession object at 0x7ff86153f550>
client = <chirc.client.ChircClient object at 0x7ff86153f518>
expect_code = '502', expect_nick = 'user1', expect_nparams = 1
expect_short_params = None, long_param_re = 'Cannot change mode for other users'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
>           msg = client.get_message()

tests/chirc/tests/common.py:340: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.client.ChircClient object at 0x7ff86153f518>

    def get_message(self):
        msg = self.client.read_until(str.encode("\r\n"), timeout=self.msg_timeout)
        msg = msg.decode()
        if msg[-2:] != "\r\n":
>           raise ReplyTimeoutException(msg)
E           chirc.types.ReplyTimeoutException

tests/chirc/client.py:37: ReplyTimeoutException

During handling of the above exception, another exception occurred:

self = <chirc.tests.test_modes.TestMODE object at 0x7ff86153fe48>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86153f550>

    def test_user_mode11(self, irc_session):
        """
        The user tries to unset the "o" mode for another user.
    
        ERR_USERSDONTMATCH should be returned.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
>       irc_session.set_user_mode(client1, "user1", "user2", "-o")

tests/chirc/tests/test_modes.py:166: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:265: in set_user_mode
    long_param_re = "Cannot change mode for other users")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86153f550>
client = <chirc.client.ChircClient object at 0x7ff86153f518>
expect_code = '502', expect_nick = 'user1', expect_nparams = 1
expect_short_params = None, long_param_re = 'Cannot change mode for other users'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
            msg = client.get_message()
    
            if expect_timeout:
                pytest.fail("Was not expecting a reply, but got one:\n" + msg.raw(bookends=True))
        except EOFError:
            pytest.fail("Server closed connection unexpectedly. Possible segfault in server?")
        except ReplyTimeoutException as rte:
            if expect_timeout:
                return None
    
            if len(rte.bytes_received) == 0:
                failmsg = "Expected a reply but got none (no bytes received)"
            else:
                failmsg = "Expected a reply but did not get valid reply terminated with \\r\\n. Bytes received:\n|||{}|||".format(rte.bytes_received)
>           pytest.fail(failmsg)
E           Failed: Expected a reply but got none (no bytes received)

tests/chirc/tests/common.py:354: Failed
__________________________ TestMODE.test_user_mode12 ___________________________

self = <chirc.tests.common.IRCSession object at 0x7ff86151b860>
client = <chirc.client.ChircClient object at 0x7ff86151bd30>
expect_code = '502', expect_nick = 'user1', expect_nparams = 1
expect_short_params = None, long_param_re = 'Cannot change mode for other users'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
>           msg = client.get_message()

tests/chirc/tests/common.py:340: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.client.ChircClient object at 0x7ff86151bd30>

    def get_message(self):
        msg = self.client.read_until(str.encode("\r\n"), timeout=self.msg_timeout)
        msg = msg.decode()
        if msg[-2:] != "\r\n":
>           raise ReplyTimeoutException(msg)
E           chirc.types.ReplyTimeoutException

tests/chirc/client.py:37: ReplyTimeoutException

During handling of the above exception, another exception occurred:

self = <chirc.tests.test_modes.TestMODE object at 0x7ff86151b828>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86151b860>

    def test_user_mode12(self, irc_session):
        """
        The user tries to unset the "z" mode for another user.
    
        ERR_USERSDONTMATCH should be returned (even though "z" is not a valid user mode)
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
>       irc_session.set_user_mode(client1, "user1", "user2", "-z")

tests/chirc/tests/test_modes.py:177: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:265: in set_user_mode
    long_param_re = "Cannot change mode for other users")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86151b860>
client = <chirc.client.ChircClient object at 0x7ff86151bd30>
expect_code = '502', expect_nick = 'user1', expect_nparams = 1
expect_short_params = None, long_param_re = 'Cannot change mode for other users'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
            msg = client.get_message()
    
            if expect_timeout:
                pytest.fail("Was not expecting a reply, but got one:\n" + msg.raw(bookends=True))
        except EOFError:
            pytest.fail("Server closed connection unexpectedly. Possible segfault in server?")
        except ReplyTimeoutException as rte:
            if expect_timeout:
                return None
    
            if len(rte.bytes_received) == 0:
                failmsg = "Expected a reply but got none (no bytes received)"
            else:
                failmsg = "Expected a reply but did not get valid reply terminated with \\r\\n. Bytes received:\n|||{}|||".format(rte.bytes_received)
>           pytest.fail(failmsg)
E           Failed: Expected a reply but got none (no bytes received)

tests/chirc/tests/common.py:354: Failed
_________________________ TestMODE.test_channel_mode01 _________________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff8612bdb70>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8612e76d8>

    def test_channel_mode01(self, irc_session):
        """
        A user joins a channel and sets it to be moderated (+m)
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("JOIN #test")
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_modes.py:187: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8612e76d8>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8612e7b70>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestMODE.test_channel_mode02 _________________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff8612d81d0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8612d8748>

    def test_channel_mode02(self, irc_session):
        """
        A user joins a channel and sets it so that only the channel
        operator can change the topic (+t)
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("JOIN #test")
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_modes.py:201: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8612d8748>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8612d8940>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestMODE.test_channel_mode03 _________________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff861519240>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861519b38>

    def test_channel_mode03(self, irc_session):
        """
        A user joins a channel and sets it so it will not be moderated (-m)
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("JOIN #test")
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_modes.py:214: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861519b38>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86151ba58>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestMODE.test_channel_mode04 _________________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff8612dc320>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8612dcfd0>

    def test_channel_mode04(self, irc_session):
        """
        A user joins a channel and sets it so that anyone in the channel
        can change the topic (+t)
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("JOIN #test")
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_modes.py:228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8612dcfd0>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8612dc668>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestMODE.test_channel_mode05 _________________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff8612ab470>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8612ab860>

    def test_channel_mode05(self, irc_session):
        """
        A user joins a channel and tries to set an unsupported channel mode (+z)
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("JOIN #test")
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_modes.py:241: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8612ab860>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8612ab048>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestMODE.test_channel_mode06 _________________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff8612fda20>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8612fdfd0>

    def test_channel_mode06(self, irc_session):
        """
        A user joins a channel and tries to set an unsupported channel mode (+o),
        althought is _is_ a supported member status mode.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("JOIN #test")
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_modes.py:254: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8612fdfd0>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8612fd550>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestMODE.test_channel_mode07 _________________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff861540320>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8615400f0>

    def test_channel_mode07(self, irc_session):
        """
        A user joins a channel and tries to set an unsupported channel mode (+v),
        althought is _is_ a supported member status mode.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("JOIN #test")
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_modes.py:267: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8615400f0>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861540630>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestMODE.test_channel_mode08 _________________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff86127bac8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86127ba90>

    def test_channel_mode08(self, irc_session):
        """
        A user joins a channel and sets it to be moderated (+m). Then it asks
        for the channel modes, and checks that "m" is one of the modes.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("JOIN #test")
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_modes.py:280: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86127ba90>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86127bd68>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestMODE.test_channel_mode09 _________________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff861295e80>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861295400>

    def test_channel_mode09(self, irc_session):
        """
        A user joins a channel and sets it to be moderated (+m) and so that
        only channel operators can change the topic (+t). Then it asks
        for the channel modes, and checks that "m" and "t" are modes of the channel.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("JOIN #test")
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_modes.py:297: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861295400>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861295278>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestMODE.test_channel_mode10 _________________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff8612e77f0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8612e7be0>

    def test_channel_mode10(self, irc_session):
        """
        A user joins a channel and sets it to be moderated (+m) and so that
        only channel operators can change the topic (+t), then removes that mode (-t).
        Then it asks for the channel modes, and checks that only "m" is set.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("JOIN #test")
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_modes.py:317: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8612e7be0>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8612e7128>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestMODE.test_channel_mode11 _________________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff86151c2b0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86151ca58>

    def test_channel_mode11(self, irc_session):
        """
        A user joins a channel and sets it to be moderated (+m) and so that
        only channel operators can change the topic (+t), then makes it unmoderated (-m).
        Then it asks for the channel modes, and checks that only "t" is set.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("JOIN #test")
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_modes.py:340: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86151ca58>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8613e2a90>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestMODE.test_channel_mode12 _________________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff861350390>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861350470>

    def test_channel_mode12(self, irc_session):
        """
        A user joins a channel and sets it to be moderated (+m) and so that
        only channel operators can change the topic (+t), then removes both
        those modes (-m and -t). Then it asks for the channel modes, and
        checks that no modes are set.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("JOIN #test")
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_modes.py:364: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861350470>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861350748>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestMODE.test_channel_mode13 _________________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff861278ef0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861278f28>

    def test_channel_mode13(self, irc_session):
        """
        A user joins a channel and asks for its modes. There should be none.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("JOIN #test")
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_modes.py:389: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861278f28>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861278f98>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestMODE.test_channel_mode14 _________________________

self = <chirc.tests.common.IRCSession object at 0x7ff861212518>
client = <chirc.client.ChircClient object at 0x7ff861212588>
expect_code = '403', expect_nick = 'user1', expect_nparams = 2
expect_short_params = ['#test'], long_param_re = 'No such channel'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
>           msg = client.get_message()

tests/chirc/tests/common.py:340: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.client.ChircClient object at 0x7ff861212588>

    def get_message(self):
        msg = self.client.read_until(str.encode("\r\n"), timeout=self.msg_timeout)
        msg = msg.decode()
        if msg[-2:] != "\r\n":
>           raise ReplyTimeoutException(msg)
E           chirc.types.ReplyTimeoutException

tests/chirc/client.py:37: ReplyTimeoutException

During handling of the above exception, another exception occurred:

self = <chirc.tests.test_modes.TestMODE object at 0x7ff8612123c8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861212518>

    def test_channel_mode14(self, irc_session):
        """
        A user tries to ask for the modes of a channel that doesn't exist.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
>       irc_session.set_channel_mode(client1, "user1", "#test", expect_wrong_channel = True)

tests/chirc/tests/test_modes.py:401: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:296: in set_channel_mode
    long_param_re = "No such channel")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861212518>
client = <chirc.client.ChircClient object at 0x7ff861212588>
expect_code = '403', expect_nick = 'user1', expect_nparams = 2
expect_short_params = ['#test'], long_param_re = 'No such channel'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
            msg = client.get_message()
    
            if expect_timeout:
                pytest.fail("Was not expecting a reply, but got one:\n" + msg.raw(bookends=True))
        except EOFError:
            pytest.fail("Server closed connection unexpectedly. Possible segfault in server?")
        except ReplyTimeoutException as rte:
            if expect_timeout:
                return None
    
            if len(rte.bytes_received) == 0:
                failmsg = "Expected a reply but got none (no bytes received)"
            else:
                failmsg = "Expected a reply but did not get valid reply terminated with \\r\\n. Bytes received:\n|||{}|||".format(rte.bytes_received)
>           pytest.fail(failmsg)
E           Failed: Expected a reply but got none (no bytes received)

tests/chirc/tests/common.py:354: Failed
_________________________ TestMODE.test_channel_mode15 _________________________

self = <chirc.tests.common.IRCSession object at 0x7ff8612c6da0>
client = <chirc.client.ChircClient object at 0x7ff8612c6940>
expect_code = '403', expect_nick = 'user1', expect_nparams = 2
expect_short_params = ['#test'], long_param_re = 'No such channel'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
>           msg = client.get_message()

tests/chirc/tests/common.py:340: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.client.ChircClient object at 0x7ff8612c6940>

    def get_message(self):
        msg = self.client.read_until(str.encode("\r\n"), timeout=self.msg_timeout)
        msg = msg.decode()
        if msg[-2:] != "\r\n":
>           raise ReplyTimeoutException(msg)
E           chirc.types.ReplyTimeoutException

tests/chirc/client.py:37: ReplyTimeoutException

During handling of the above exception, another exception occurred:

self = <chirc.tests.test_modes.TestMODE object at 0x7ff8612c6860>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8612c6da0>

    def test_channel_mode15(self, irc_session):
        """
        A user tries to set the mode of a channel that doesn't exist.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
>       irc_session.set_channel_mode(client1, "user1", "#test", "+m", expect_wrong_channel = True)

tests/chirc/tests/test_modes.py:411: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:296: in set_channel_mode
    long_param_re = "No such channel")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8612c6da0>
client = <chirc.client.ChircClient object at 0x7ff8612c6940>
expect_code = '403', expect_nick = 'user1', expect_nparams = 2
expect_short_params = ['#test'], long_param_re = 'No such channel'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
            msg = client.get_message()
    
            if expect_timeout:
                pytest.fail("Was not expecting a reply, but got one:\n" + msg.raw(bookends=True))
        except EOFError:
            pytest.fail("Server closed connection unexpectedly. Possible segfault in server?")
        except ReplyTimeoutException as rte:
            if expect_timeout:
                return None
    
            if len(rte.bytes_received) == 0:
                failmsg = "Expected a reply but got none (no bytes received)"
            else:
                failmsg = "Expected a reply but did not get valid reply terminated with \\r\\n. Bytes received:\n|||{}|||".format(rte.bytes_received)
>           pytest.fail(failmsg)
E           Failed: Expected a reply but got none (no bytes received)

tests/chirc/tests/common.py:354: Failed
_________________________ TestMODE.test_channel_mode16 _________________________

self = <chirc.tests.common.IRCSession object at 0x7ff861396ef0>
client = <chirc.client.ChircClient object at 0x7ff861396dd8>
expect_code = '403', expect_nick = 'user1', expect_nparams = 2
expect_short_params = ['#test'], long_param_re = 'No such channel'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
>           msg = client.get_message()

tests/chirc/tests/common.py:340: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.client.ChircClient object at 0x7ff861396dd8>

    def get_message(self):
        msg = self.client.read_until(str.encode("\r\n"), timeout=self.msg_timeout)
        msg = msg.decode()
        if msg[-2:] != "\r\n":
>           raise ReplyTimeoutException(msg)
E           chirc.types.ReplyTimeoutException

tests/chirc/client.py:37: ReplyTimeoutException

During handling of the above exception, another exception occurred:

self = <chirc.tests.test_modes.TestMODE object at 0x7ff861396d68>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861396ef0>

    def test_channel_mode16(self, irc_session):
        """
        A user tries to set the mode of a channel that doesn't exist.
        The specified mode is also not a valid channel mode (but we
        don't get an error for that)
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
>       irc_session.set_channel_mode(client1, "user1", "#test", "+o", expect_wrong_channel = True)

tests/chirc/tests/test_modes.py:423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:296: in set_channel_mode
    long_param_re = "No such channel")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861396ef0>
client = <chirc.client.ChircClient object at 0x7ff861396dd8>
expect_code = '403', expect_nick = 'user1', expect_nparams = 2
expect_short_params = ['#test'], long_param_re = 'No such channel'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
            msg = client.get_message()
    
            if expect_timeout:
                pytest.fail("Was not expecting a reply, but got one:\n" + msg.raw(bookends=True))
        except EOFError:
            pytest.fail("Server closed connection unexpectedly. Possible segfault in server?")
        except ReplyTimeoutException as rte:
            if expect_timeout:
                return None
    
            if len(rte.bytes_received) == 0:
                failmsg = "Expected a reply but got none (no bytes received)"
            else:
                failmsg = "Expected a reply but did not get valid reply terminated with \\r\\n. Bytes received:\n|||{}|||".format(rte.bytes_received)
>           pytest.fail(failmsg)
E           Failed: Expected a reply but got none (no bytes received)

tests/chirc/tests/common.py:354: Failed
_________________________ TestMODE.test_channel_mode17 _________________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff8612b7630>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8612b78d0>

    def test_channel_mode17(self, irc_session):
        """
        Ten clients connect to the server, and they all join the same channel.
    
        The first user to join the channel (the operator) sets the channel to be
        moderated.
    
        We check that everyone in the channel receives the relay of the MODE
        """
    
>       clients = irc_session.connect_clients(10, join_channel = "#test")

tests/chirc/tests/test_modes.py:436: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8612b78d0>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8613fc630>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_________________________ TestMODE.test_channel_mode18 _________________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff8613e4a58>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8613e4cc0>

    def test_channel_mode18(self, irc_session):
        """
        Two clients connect to the server and join the same channel.
    
        The first one should be granted operator privileges, the second one
        shouldn't. The second tries to set the channel to be moderated (+m)
        and is denied because channel operator privileges are required to do so
        """
    
>       clients = irc_session.connect_clients(2, join_channel = "#test")

tests/chirc/tests/test_modes.py:455: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8613e4cc0>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8613e4cf8>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_______________________ TestMODE.test_channeluser_mode01 _______________________

self = <chirc.tests.common.IRCSession object at 0x7ff8612d8940>
client = <chirc.client.ChircClient object at 0x7ff8612d8fd0>
expect_code = '403', expect_nick = 'user1', expect_nparams = 2
expect_short_params = ['#test'], long_param_re = 'No such channel'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
>           msg = client.get_message()

tests/chirc/tests/common.py:340: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.client.ChircClient object at 0x7ff8612d8fd0>

    def get_message(self):
        msg = self.client.read_until(str.encode("\r\n"), timeout=self.msg_timeout)
        msg = msg.decode()
        if msg[-2:] != "\r\n":
>           raise ReplyTimeoutException(msg)
E           chirc.types.ReplyTimeoutException

tests/chirc/client.py:37: ReplyTimeoutException

During handling of the above exception, another exception occurred:

self = <chirc.tests.test_modes.TestMODE object at 0x7ff8614744e0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8612d8940>

    def test_channeluser_mode01(self, irc_session):
        """
        A user tries to set another user's member status mode (in #test)
        to +v. Neither the user nor the channel exist."""
    
        client1 = irc_session.connect_user("user1", "User One")
    
>       irc_session.set_channel_mode(client1, "user1", "#test", "+v", "user2", expect_wrong_channel = True)

tests/chirc/tests/test_modes.py:471: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:296: in set_channel_mode
    long_param_re = "No such channel")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8612d8940>
client = <chirc.client.ChircClient object at 0x7ff8612d8fd0>
expect_code = '403', expect_nick = 'user1', expect_nparams = 2
expect_short_params = ['#test'], long_param_re = 'No such channel'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
            msg = client.get_message()
    
            if expect_timeout:
                pytest.fail("Was not expecting a reply, but got one:\n" + msg.raw(bookends=True))
        except EOFError:
            pytest.fail("Server closed connection unexpectedly. Possible segfault in server?")
        except ReplyTimeoutException as rte:
            if expect_timeout:
                return None
    
            if len(rte.bytes_received) == 0:
                failmsg = "Expected a reply but got none (no bytes received)"
            else:
                failmsg = "Expected a reply but did not get valid reply terminated with \\r\\n. Bytes received:\n|||{}|||".format(rte.bytes_received)
>           pytest.fail(failmsg)
E           Failed: Expected a reply but got none (no bytes received)

tests/chirc/tests/common.py:354: Failed
_______________________ TestMODE.test_channeluser_mode02 _______________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff861256f60>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861256d30>

    def test_channeluser_mode02(self, irc_session):
        """
        Two users connect to the server. The first one joins #test, the second
        one does not.
    
        The second user tries to set the first user's member status mode in #test
        to +v. The second user does not have channel operator privileges in
        #test, and cannot do this (the user is also not in the channel,
        but the root cause of failure is the lack of privileges)
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("JOIN #test")
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_modes.py:488: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861256d30>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861256780>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_______________________ TestMODE.test_channeluser_mode03 _______________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff8611ec828>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8611ecc88>

    def test_channeluser_mode03(self, irc_session):
        """
        Two users connect to the server and they both join the #test channel.
    
        The second user tries to set the first user's member status mode in #test
        to +v. The second user does not have channel operator privileges in
        #test, and cannot do this.
        """
    
>       clients = irc_session.connect_clients(2, join_channel = "#test")

tests/chirc/tests/test_modes.py:504: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8611ecc88>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8611ec2b0>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_______________________ TestMODE.test_channeluser_mode04 _______________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff8613fccf8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8613fc0b8>

    def test_channeluser_mode04(self, irc_session):
        """
        Two users connect to the server and they both join the #test channel.
    
        The first user tries to set the member status mode of a user that
        is not in the server.
        """
    
>       clients = irc_session.connect_clients(2, join_channel = "#test")

tests/chirc/tests/test_modes.py:520: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8613fc0b8>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8613c90b8>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_______________________ TestMODE.test_channeluser_mode05 _______________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff86121b978>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86121b198>

    def test_channeluser_mode05(self, irc_session):
        """
        Two users connect to the server and the first one joins the #test channel.
    
        The first user tries to set the member status mode of the second user
        (who is not in the channel)
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("JOIN #test")
>       irc_session.verify_join(client1, "user1", "#test")

tests/chirc/tests/test_modes.py:539: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86121b198>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86121b2e8>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_______________________ TestMODE.test_channeluser_mode06 _______________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff861131b70>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861131c88>

    def test_channeluser_mode06(self, irc_session):
        """
        Two users connect to the server and they both join the #test channel.
    
        The first user tries to set the second user's member status mode to
        a mode that is not valid.
        """
    
>       clients = irc_session.connect_clients(2, join_channel = "#test")

tests/chirc/tests/test_modes.py:554: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861131c88>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861131d30>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_______________________ TestMODE.test_channeluser_mode07 _______________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff86115f710>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86115f898>

    def test_channeluser_mode07(self, irc_session):
        """
        Two users connect to the server and they both join the #test channel.
    
        The first user tries to set the second user's member status mode to
        a mode that is not valid.
        """
    
>       clients = irc_session.connect_clients(2, join_channel = "#test")

tests/chirc/tests/test_modes.py:570: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86115f898>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86115f828>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_______________________ TestMODE.test_channeluser_mode08 _______________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff8613967b8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861396b70>

    def test_channeluser_mode08(self, irc_session):
        """
        Ten users connect to the server and they all join the #test channel.
    
        The first user to join the channel (the operator) gives voice privileges
        to user2 (+v)
    
        We check that everyone in the channel receives the relay of the MODE
        """
    
>       clients = irc_session.connect_clients(10, join_channel = "#test")

tests/chirc/tests/test_modes.py:588: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861396b70>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8612c1e80>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_______________________ TestMODE.test_channeluser_mode09 _______________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff8613b3048>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8613b33c8>

    def test_channeluser_mode09(self, irc_session):
        """
        Ten users connect to the server and they all join the #test channel.
    
        The first user to join the channel (the operator) gives operator
        privileges to user2 (+o)
    
        We check that everyone in the channel receives the relay of the MODE
        """
    
>       clients = irc_session.connect_clients(10, join_channel = "#test")

tests/chirc/tests/test_modes.py:608: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8613b33c8>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8611d8c18>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_______________________ TestMODE.test_channeluser_mode10 _______________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff8611f7b70>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8611f7ac8>

    def test_channeluser_mode10(self, irc_session):
        """
        Ten users connect to the server and they all join the #test channel.
    
        The following happens:
    
        - user1 gives user2 operator privileges in the channel. We check
          that everyone receives the relay.
        - user2 gives voice privileges to user3. We check that everyone
          receives the relay.
        - user1 takes away the operator privileges from user2. We check
          that everyone receives the relay.
        - user2 (who is no longer an operator) tries to give voice
          privileges to user4 but is denied.
        """
    
>       clients = irc_session.connect_clients(5, join_channel = "#test")

tests/chirc/tests/test_modes.py:634: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8611f7ac8>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8613a1e48>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
__________________________ TestMODE.test_mode_params ___________________________

self = <chirc.tests.common.IRCSession object at 0x7ff8612ab518>
client = <chirc.client.ChircClient object at 0x7ff8612abc18>
expect_code = '461', expect_nick = 'user1', expect_nparams = 2
expect_short_params = ['MODE'], long_param_re = 'Not enough parameters'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
>           msg = client.get_message()

tests/chirc/tests/common.py:340: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.client.ChircClient object at 0x7ff8612abc18>

    def get_message(self):
        msg = self.client.read_until(str.encode("\r\n"), timeout=self.msg_timeout)
        msg = msg.decode()
        if msg[-2:] != "\r\n":
>           raise ReplyTimeoutException(msg)
E           chirc.types.ReplyTimeoutException

tests/chirc/client.py:37: ReplyTimeoutException

During handling of the above exception, another exception occurred:

self = <chirc.tests.test_modes.TestMODE object at 0x7ff8612c6438>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8612ab518>

    def test_mode_params(self, irc_session):
        """
        Test ERR_NEEDMOREPARAMS reply
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("MODE")
    
        irc_session.get_ERR_NEEDMOREPARAMS_reply(client1,
>                                                expect_nick="user1", expect_cmd="MODE")

tests/chirc/tests/test_modes.py:664: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:364: in get_ERR_NEEDMOREPARAMS_reply
    long_param_re = "Not enough parameters")
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8612ab518>
client = <chirc.client.ChircClient object at 0x7ff8612abc18>
expect_code = '461', expect_nick = 'user1', expect_nparams = 2
expect_short_params = ['MODE'], long_param_re = 'Not enough parameters'
long_param_values = None, expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
            msg = client.get_message()
    
            if expect_timeout:
                pytest.fail("Was not expecting a reply, but got one:\n" + msg.raw(bookends=True))
        except EOFError:
            pytest.fail("Server closed connection unexpectedly. Possible segfault in server?")
        except ReplyTimeoutException as rte:
            if expect_timeout:
                return None
    
            if len(rte.bytes_received) == 0:
                failmsg = "Expected a reply but got none (no bytes received)"
            else:
                failmsg = "Expected a reply but did not get valid reply terminated with \\r\\n. Bytes received:\n|||{}|||".format(rte.bytes_received)
>           pytest.fail(failmsg)
E           Failed: Expected a reply but got none (no bytes received)

tests/chirc/tests/common.py:354: Failed
_______________________ TestMODE.test_connect_channels01 _______________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff8611f1b00>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8611f12e8>

    def test_connect_channels01(self, irc_session):
        """
        Connects nine users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators):
    
        #test1: @user1, user2, user3
        #test2: @user4, user5, user6
        #test3: @user7, user8, user9
        """
>       irc_session.connect_and_join_channels(channels1)

tests/chirc/tests/test_modes.py:677: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8611f12e8>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8611f1a20>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_______________________ TestMODE.test_connect_channels02 _______________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff861154128>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86131b278>

    def test_connect_channels02(self, irc_session):
        """
        Connects eleven users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators):
    
        #test1: @user1, user2, user3
        #test2: @user4, user5, user6
        #test3: @user7, user8, user9
    
        Not in a channel: user10, user11
        """
>       irc_session.connect_and_join_channels(channels2)

tests/chirc/tests/test_modes.py:692: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86131b278>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86131b2e8>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_______________________ TestMODE.test_connect_channels03 _______________________

self = <chirc.tests.test_modes.TestMODE object at 0x7ff86120c780>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86120c940>

    def test_connect_channels03(self, irc_session):
        """
        Connects eleven users to the server, and has them join
        the following channels, and set the following privileges:
        (@ denotes channel operators, and + denotes a user with voice privileges):
    
        #test1: @user1, user2, user3
        #test2: @user2
        #test3: @user3, @user4, user5, user6
        #test4: @user7, +user8, +user9, user1, user2
        #test5: @user1, @user5
    
        Not in a channel: user10, user11
        """
>       irc_session.connect_and_join_channels(channels3)

tests/chirc/tests/test_modes.py:709: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86120c940>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86120c2e8>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
__________________ TestPermissions.test_permissions_privmsg1 ___________________

self = <chirc.tests.test_modes.TestPermissions object at 0x7ff861202e80>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861202198>

    def test_permissions_privmsg1(self, irc_session):
        """
        Test that, in a moderated channel, users without voice privileges
        cannot send messages to the channel.
        """
    
>       clients = self._join_and_mode(irc_session, 3, "#test", "+m")

tests/chirc/tests/test_modes.py:762: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_modes.py:722: in _join_and_mode
    clients = irc_session.connect_clients(numclients, join_channel = channel)
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861202198>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8613506a0>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
__________________ TestPermissions.test_permissions_privmsg2 ___________________

self = <chirc.tests.test_modes.TestPermissions object at 0x7ff86134c9e8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86134c438>

    def test_permissions_privmsg2(self, irc_session):
        """
        Test that, in a moderated channel, the channel operator
        can send messages to the channel.
        """
    
>       clients = self._join_and_mode(irc_session, 3, "#test", "+m")

tests/chirc/tests/test_modes.py:780: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_modes.py:722: in _join_and_mode
    clients = irc_session.connect_clients(numclients, join_channel = channel)
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86134c438>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86134c8d0>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
__________________ TestPermissions.test_permissions_privmsg3 ___________________

self = <chirc.tests.test_modes.TestPermissions object at 0x7ff8612855c0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861285438>

    def test_permissions_privmsg3(self, irc_session):
        """
        Test that, in a moderated channel, a user with voice privileges
        can send messages to the channel.
        """
    
>       clients = self._join_and_mode(irc_session, 3, "#test", "+m")

tests/chirc/tests/test_modes.py:793: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_modes.py:722: in _join_and_mode
    clients = irc_session.connect_clients(numclients, join_channel = channel)
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861285438>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86120e048>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
__________________ TestPermissions.test_permissions_privmsg4 ___________________

self = <chirc.tests.test_modes.TestPermissions object at 0x7ff8611e3ac8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8611e3198>

    def test_permissions_privmsg4(self, irc_session):
        """
        Test that, in a moderated channel, a user who has been granted channel operator
        privileges can send messages to the channel.
        """
    
>       clients = self._join_and_mode(irc_session, 3, "#test", "+m")

tests/chirc/tests/test_modes.py:811: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_modes.py:722: in _join_and_mode
    clients = irc_session.connect_clients(numclients, join_channel = channel)
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8611e3198>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8611e32e8>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
__________________ TestPermissions.test_permissions_privmsg5 ___________________

self = <chirc.tests.test_modes.TestPermissions object at 0x7ff86120c908>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86120c978>

    def test_permissions_privmsg5(self, irc_session):
        """
        Test that, in a moderated channel, a user who has been granted
        voice privileges and then has had them removed cannot send
        messages to the channel.
        """
    
>       clients = self._join_and_mode(irc_session, 3, "#test", "+m")

tests/chirc/tests/test_modes.py:830: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_modes.py:722: in _join_and_mode
    clients = irc_session.connect_clients(numclients, join_channel = channel)
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86120c978>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861212b00>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
___________________ TestPermissions.test_permissions_notice ____________________

self = <chirc.tests.test_modes.TestPermissions object at 0x7ff8613254a8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861325748>

    def test_permissions_notice(self, irc_session):
        """
        Test that, in a moderated channel, a user who has does not
        have voice privileges will not receive an error if they send
        a NOTICE to the channel.
        """
    
>       clients = self._join_and_mode(irc_session, 3, "#test", "+m")

tests/chirc/tests/test_modes.py:858: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_modes.py:722: in _join_and_mode
    clients = irc_session.connect_clients(numclients, join_channel = channel)
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861325748>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861325940>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
___________________ TestPermissions.test_permissions_topic1 ____________________

self = <chirc.tests.test_modes.TestPermissions object at 0x7ff8613587b8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861358518>

    def test_permissions_topic1(self, irc_session):
        """
        Test that a user without channel operator privileges cannot
        set the topic in a channel with the +t mode
        """
    
>       clients = self._join_and_mode(irc_session, 3, "#test", "+t")

tests/chirc/tests/test_modes.py:874: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_modes.py:722: in _join_and_mode
    clients = irc_session.connect_clients(numclients, join_channel = channel)
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861358518>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861358748>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
___________________ TestPermissions.test_permissions_topic2 ____________________

self = <chirc.tests.test_modes.TestPermissions object at 0x7ff86136f5f8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86136ff60>

    def test_permissions_topic2(self, irc_session):
        """
        Test that a user who has been granted channel operator privileges can
        set the topic in a channel with the +t mode
        """
    
>       clients = self._join_and_mode(irc_session, 3, "#test", "+t")

tests/chirc/tests/test_modes.py:892: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_modes.py:722: in _join_and_mode
    clients = irc_session.connect_clients(numclients, join_channel = channel)
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86136ff60>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86127cbe0>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________ TestPermissions.test_permissions_oper1 ____________________

self = <chirc.tests.test_modes.TestPermissions object at 0x7ff86128fcf8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86128f860>

    def test_permissions_oper1(self, irc_session):
        """
        Check that an IRCop can set a channel to be moderated
        not being a channel operator.
        """
    
>       clients = irc_session.connect_clients(3, join_channel = "#test")

tests/chirc/tests/test_modes.py:913: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86128f860>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861338898>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________ TestPermissions.test_permissions_oper2 ____________________

self = <chirc.tests.test_modes.TestPermissions object at 0x7ff86128ec88>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86128e860>

    def test_permissions_oper2(self, irc_session):
        """
        Check that an IRCop can grant voice privileges to someone on a channel
        despite not being a channel operator.
        """
    
>       clients = irc_session.connect_clients(3, join_channel = "#test")

tests/chirc/tests/test_modes.py:932: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86128e860>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86128e898>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________ TestPermissions.test_permissions_oper3 ____________________

self = <chirc.tests.test_modes.TestPermissions object at 0x7ff8612125f8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861107a58>

    def test_permissions_oper3(self, irc_session):
        """
        Check that an IRCop can grant operator privileges to someone on a channel
        despite not being a channel operator.
        """
    
>       clients = irc_session.connect_clients(3, join_channel = "#test")

tests/chirc/tests/test_modes.py:950: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861107a58>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861107128>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________ TestPermissions.test_permissions_oper4 ____________________

self = <chirc.tests.test_modes.TestPermissions object at 0x7ff8611f26d8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8611f2e48>

    def test_permissions_oper4(self, irc_session):
        """
        Check that an IRCop can send messages to a moderated channel despite
        not being a channel operator.
        """
    
>       clients = self._join_and_mode(irc_session, 3, "#test", "+m")

tests/chirc/tests/test_modes.py:968: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_modes.py:722: in _join_and_mode
    clients = irc_session.connect_clients(numclients, join_channel = channel)
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8611f2e48>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8611f29e8>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________ TestPermissions.test_permissions_oper5 ____________________

self = <chirc.tests.test_modes.TestPermissions object at 0x7ff8611e3f98>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8611e3198>

    def test_permissions_oper5(self, irc_session):
        """
        Check that an IRCop can change the topic in a channel with +t despite
        not being a channel operator.
        """
    
>       clients = self._join_and_mode(irc_session, 3, "#test", "+t")

tests/chirc/tests/test_modes.py:982: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_modes.py:722: in _join_and_mode
    clients = irc_session.connect_clients(numclients, join_channel = channel)
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8611e3198>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86131b748>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_____________________________ TestAWAY.test_away1 ______________________________

self = <chirc.tests.test_modes.TestAWAY object at 0x7ff861272d68>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861272a58>

    def test_away1(self, irc_session):
        """
        Makes a user go away.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
>       self._away(irc_session, client1, "user1", "I'm not here")

tests/chirc/tests/test_modes.py:1021: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_modes.py:1002: in _away
    expect_nparams = 1, long_param_re = "You have been marked as being away")
tests/chirc/tests/common.py:356: in get_reply
    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)
tests/chirc/tests/common.py:438: in verify_reply
    long_param_re = long_param_re, long_param_values = long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861272a58>, a = '421'
b = '306'
explanation = 'Expected command 306, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 AWAY :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861272a20>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command 306, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 AWAY :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_____________________________ TestAWAY.test_away2 ______________________________

self = <chirc.tests.test_modes.TestAWAY object at 0x7ff861324d68>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8613244e0>

    def test_away2(self, irc_session):
        """
        Makes a user go away and then return from away.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
>       self._away(irc_session, client1, "user1", "I'm not here")

tests/chirc/tests/test_modes.py:1031: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_modes.py:1002: in _away
    expect_nparams = 1, long_param_re = "You have been marked as being away")
tests/chirc/tests/common.py:356: in get_reply
    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)
tests/chirc/tests/common.py:438: in verify_reply
    long_param_re = long_param_re, long_param_values = long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8613244e0>, a = '421'
b = '306'
explanation = 'Expected command 306, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 AWAY :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861324e10>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command 306, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 AWAY :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_____________________________ TestAWAY.test_away3 ______________________________

self = <chirc.tests.test_modes.TestAWAY object at 0x7ff861317438>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8613174a8>

    def test_away3(self, irc_session):
        """
        Makes a user return from away (not already being away)
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
>       self._unaway(irc_session, client1, "user1")

tests/chirc/tests/test_modes.py:1042: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_modes.py:1011: in _unaway
    expect_nparams = 1, long_param_re = "You are no longer marked as being away")
tests/chirc/tests/common.py:356: in get_reply
    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)
tests/chirc/tests/common.py:438: in verify_reply
    long_param_re = long_param_re, long_param_values = long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8613174a8>, a = '421'
b = '305'
explanation = 'Expected command 305, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 AWAY :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861317780>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command 305, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 AWAY :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_____________________________ TestAWAY.test_away4 ______________________________

self = <chirc.tests.test_modes.TestAWAY object at 0x7ff861220668>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861220518>

    def test_away4(self, irc_session):
        """
        Check that if a user contacts another user who is away,
        they get the away message back.
        """
    
        clients = irc_session.connect_clients(2)
    
        nick1, client1 = clients[0]
        nick2, client2 = clients[1]
    
        away_msg = "I'm not here"
    
>       self._away(irc_session, client1, "user1", away_msg)

tests/chirc/tests/test_modes.py:1058: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_modes.py:1002: in _away
    expect_nparams = 1, long_param_re = "You have been marked as being away")
tests/chirc/tests/common.py:356: in get_reply
    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)
tests/chirc/tests/common.py:438: in verify_reply
    long_param_re = long_param_re, long_param_values = long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861220518>, a = '421'
b = '306'
explanation = 'Expected command 306, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 AWAY :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861220048>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command 306, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 AWAY :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_____________________________ TestAWAY.test_away5 ______________________________

self = <chirc.tests.test_modes.TestAWAY object at 0x7ff86127ce80>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86127c198>

    def test_away5(self, irc_session):
        """
        Check that if a user contacts another user who is away,
        and uses NOTICE, they get nothing back.
        """
    
        clients = irc_session.connect_clients(2)
    
        nick1, client1 = clients[0]
        nick2, client2 = clients[1]
    
        away_msg = "I'm not here"
    
>       self._away(irc_session, client1, "user1", away_msg)

tests/chirc/tests/test_modes.py:1080: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/test_modes.py:1002: in _away
    expect_nparams = 1, long_param_re = "You have been marked as being away")
tests/chirc/tests/common.py:356: in get_reply
    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)
tests/chirc/tests/common.py:438: in verify_reply
    long_param_re = long_param_re, long_param_values = long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff86127c198>, a = '421'
b = '306'
explanation = 'Expected command 306, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 AWAY :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff86127cdd8>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command 306, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 AWAY :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_____________________________ TestAWAY.test_away6 ______________________________

self = <chirc.tests.test_modes.TestAWAY object at 0x7ff8611bbf28>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8611bb908>

    def test_away6(self, irc_session):
        """
        Check that RPL_AWAY replies are only sent in response to messages
        from users, not in response to messages sent to channels where
        that the user is in.
        """
    
>       clients = irc_session.connect_clients(2, join_channel = "#test")

tests/chirc/tests/test_modes.py:1094: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:151: in connect_clients
    self.join_channel(clients, join_channel)
tests/chirc/tests/common.py:238: in join_channel
    self.verify_join(client, nick, channel)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8611bb908>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8611bb940>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
_______________________ TestRobustness.test_whitespace2 ________________________

self = <chirc.tests.common.IRCSession object at 0x7ff8610d3a20>
client = <chirc.client.ChircClient object at 0x7ff8610d35f8>
expect_code = '001', expect_nick = 'user1', expect_nparams = 1
expect_short_params = None, long_param_re = None, long_param_values = None
expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
>           msg = client.get_message()

tests/chirc/tests/common.py:340: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.client.ChircClient object at 0x7ff8610d35f8>

    def get_message(self):
        msg = self.client.read_until(str.encode("\r\n"), timeout=self.msg_timeout)
        msg = msg.decode()
        if msg[-2:] != "\r\n":
>           raise ReplyTimeoutException(msg)
E           chirc.types.ReplyTimeoutException

tests/chirc/client.py:37: ReplyTimeoutException

During handling of the above exception, another exception occurred:

self = <chirc.tests.test_robustness.TestRobustness object at 0x7ff8610d3da0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8610d3a20>

    def test_whitespace2(self, irc_session):
        """
        Test sending NICK and USER with leading and trailing whitespace.
        """
    
        client = irc_session.get_client()
    
        client.send_cmd(" NICK user1 ")
        client.send_cmd(" USER user1 * * :User One ")
    
>       irc_session.get_reply(client, expect_code = replies.RPL_WELCOME, expect_nick="user1", expect_nparams = 1)

tests/chirc/tests/test_robustness.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8610d3a20>
client = <chirc.client.ChircClient object at 0x7ff8610d35f8>
expect_code = '001', expect_nick = 'user1', expect_nparams = 1
expect_short_params = None, long_param_re = None, long_param_values = None
expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
            msg = client.get_message()
    
            if expect_timeout:
                pytest.fail("Was not expecting a reply, but got one:\n" + msg.raw(bookends=True))
        except EOFError:
            pytest.fail("Server closed connection unexpectedly. Possible segfault in server?")
        except ReplyTimeoutException as rte:
            if expect_timeout:
                return None
    
            if len(rte.bytes_received) == 0:
                failmsg = "Expected a reply but got none (no bytes received)"
            else:
                failmsg = "Expected a reply but did not get valid reply terminated with \\r\\n. Bytes received:\n|||{}|||".format(rte.bytes_received)
>           pytest.fail(failmsg)
E           Failed: Expected a reply but got none (no bytes received)

tests/chirc/tests/common.py:354: Failed
_______________________ TestRobustness.test_whitespace3 ________________________

self = <chirc.tests.test_robustness.TestRobustness object at 0x7ff8611b3518>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8611b37f0>

    def test_whitespace3(self, irc_session):
        """
        Test sending NICK and USER with more than one space between parameters.
        """
    
        client = irc_session.get_client()
    
        client.send_cmd("NICK      user1")
        client.send_cmd("USER   user1  *  *  :User One")
    
>       irc_session.get_reply(client, expect_code = replies.RPL_WELCOME, expect_nick="user1", expect_nparams = 1)

tests/chirc/tests/test_robustness.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:340: in get_reply
    msg = client.get_message()
tests/chirc/client.py:38: in get_message
    msg = IRCMessage(msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.types.IRCMessage object at 0x7ff8611b3cf8>
s = ':jusot.com 461  USER :Not enough parameters\r\n'

    def __init__(self, s):
        if s[-2:] != "\r\n":
            raise MessageNotWellFormedException("Message does not end in \\r\\n", s)
    
        self._s = s[:-2]
    
        if len(self._s) == 0:
            raise MessageNotWellFormedException("Entire message is just \\r\\n", s)
    
        fields = self._s.split(" ")
    
        if fields[0][0] == ":":
            if len(fields) == 1:
                raise MessageNotWellFormedException("Message contains a prefix but no command.", s)
            self.prefix = IRCPrefix(fields[0])
            self.cmd = fields[1]
            p = 2
        else:
            self.prefix = None
            self.cmd = fields[0]
            p = 1
    
        self.params = []
    
        while p < len(fields):
>           if fields[p][0] == ":":
E           IndexError: string index out of range

tests/chirc/types.py:75: IndexError
_______________________ TestRobustness.test_whitespace4 ________________________

self = <chirc.tests.common.IRCSession object at 0x7ff8611903c8>
client = <chirc.client.ChircClient object at 0x7ff861190e80>
expect_code = '001', expect_nick = 'user1', expect_nparams = 1
expect_short_params = None, long_param_re = None, long_param_values = None
expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
>           msg = client.get_message()

tests/chirc/tests/common.py:340: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.client.ChircClient object at 0x7ff861190e80>

    def get_message(self):
        msg = self.client.read_until(str.encode("\r\n"), timeout=self.msg_timeout)
        msg = msg.decode()
        if msg[-2:] != "\r\n":
>           raise ReplyTimeoutException(msg)
E           chirc.types.ReplyTimeoutException

tests/chirc/client.py:37: ReplyTimeoutException

During handling of the above exception, another exception occurred:

self = <chirc.tests.test_robustness.TestRobustness object at 0x7ff861190390>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8611903c8>

    def test_whitespace4(self, irc_session):
        """
        Test sending NICK and USER with more than one space between parameters,
        and with leading/trailing whitespace.
        """
    
        client = irc_session.get_client()
    
        client.send_cmd("  NICK      user1  ")
        client.send_cmd("  USER user1     *     *     :User One    ")
    
>       irc_session.get_reply(client, expect_code = replies.RPL_WELCOME, expect_nick="user1", expect_nparams = 1)

tests/chirc/tests/test_robustness.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8611903c8>
client = <chirc.client.ChircClient object at 0x7ff861190e80>
expect_code = '001', expect_nick = 'user1', expect_nparams = 1
expect_short_params = None, long_param_re = None, long_param_values = None
expect_timeout = False

    def get_reply(self, client, expect_code = None, expect_nick = None, expect_nparams = None,
                  expect_short_params = None, long_param_re = None, long_param_values = None,
                  expect_timeout = False):
        try:
            msg = client.get_message()
    
            if expect_timeout:
                pytest.fail("Was not expecting a reply, but got one:\n" + msg.raw(bookends=True))
        except EOFError:
            pytest.fail("Server closed connection unexpectedly. Possible segfault in server?")
        except ReplyTimeoutException as rte:
            if expect_timeout:
                return None
    
            if len(rte.bytes_received) == 0:
                failmsg = "Expected a reply but got none (no bytes received)"
            else:
                failmsg = "Expected a reply but did not get valid reply terminated with \\r\\n. Bytes received:\n|||{}|||".format(rte.bytes_received)
>           pytest.fail(failmsg)
E           Failed: Expected a reply but got none (no bytes received)

tests/chirc/tests/common.py:354: Failed
_______________________ TestRobustness.test_whitespace5 ________________________

self = <chirc.tests.test_robustness.TestRobustness object at 0x7ff861233160>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8612335c0>

    def test_whitespace5(self, irc_session):
        """
        Test connecting one client to the server, and then sending whitespace
        followed by \r\n
        """
    
        client1 = irc_session.connect_user("user1", "User One")
    
        client1.send_cmd("  ")
    
>       irc_session.get_reply(client1, expect_timeout = True)

tests/chirc/tests/test_robustness.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:340: in get_reply
    msg = client.get_message()
tests/chirc/client.py:38: in get_message
    msg = IRCMessage(msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.types.IRCMessage object at 0x7ff861233668>
s = ':jusot.com 421 user1  :Unknown command\r\n'

    def __init__(self, s):
        if s[-2:] != "\r\n":
            raise MessageNotWellFormedException("Message does not end in \\r\\n", s)
    
        self._s = s[:-2]
    
        if len(self._s) == 0:
            raise MessageNotWellFormedException("Entire message is just \\r\\n", s)
    
        fields = self._s.split(" ")
    
        if fields[0][0] == ":":
            if len(fields) == 1:
                raise MessageNotWellFormedException("Message contains a prefix but no command.", s)
            self.prefix = IRCPrefix(fields[0])
            self.cmd = fields[1]
            p = 2
        else:
            self.prefix = None
            self.cmd = fields[0]
            p = 1
    
        self.params = []
    
        while p < len(fields):
>           if fields[p][0] == ":":
E           IndexError: string index out of range

tests/chirc/types.py:75: IndexError
_________________________ TestRobustness.test_length1 __________________________

self = <chirc.tests.test_robustness.TestRobustness object at 0x7ff86121c588>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86121ce48>

    def test_length1(self, irc_session):
        """
        Test sending a message that is exactly 512 bytes long (including
        the \r\n)
        """
    
        client1 = irc_session.connect_user("user1", "User One")
        client2 = irc_session.connect_user("user2", "User Two")
    
        base = "PRIVMSG user2 :"
    
        msg = self._gen_long_msg(512 - len(base) - 2)
        client1.send_cmd(base + msg)
        privmsg = irc_session.get_message(client2, expect_prefix = True, expect_cmd = "PRIVMSG",
                                          expect_nparams = 2, expect_short_params = ["user2"])
>       assert len(privmsg.raw()) == 510
E       AssertionError: assert 533 == 510
E        +  where 533 = len(':user1!user1@jusot.com PRIVMSG user2 :abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyza...nopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyza')
E        +    where ':user1!user1@jusot.com PRIVMSG user2 :abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyza...nopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyza' = <bound method IRCMessage.raw of <chirc.types.IRCMessage object at 0x7ff86121c390>>()
E        +      where <bound method IRCMessage.raw of <chirc.types.IRCMessage object at 0x7ff86121c390>> = <chirc.types.IRCMessage object at 0x7ff86121c390>.raw

tests/chirc/tests/test_robustness.py:89: AssertionError
_________________________ TestRobustness.test_length2 __________________________

self = <chirc.tests.test_robustness.TestRobustness object at 0x7ff86135d978>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86135d080>

    def test_length2(self, irc_session):
        """
        Test sending a PRIVMSG message that is exactly 2048 bytes long.
        The relayed PRIVMSG should be truncated.
        """
    
        client1 = irc_session.connect_user("user1", "User One")
        client2 = irc_session.connect_user("user2", "User Two")
    
        base = "PRIVMSG user2 :"
    
        msg = self._gen_long_msg(2048 - len(base) - 2)
        client1.send_cmd(base + msg)
        privmsg = irc_session.get_message(client2, expect_prefix = True, expect_cmd = "PRIVMSG",
                                          expect_nparams = 2, expect_short_params = ["user2"])
>       assert len(privmsg.raw()) == 510
E       AssertionError: assert 533 == 510
E        +  where 533 = len(':user1!user1@jusot.com PRIVMSG user2 :abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyza...nopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyza')
E        +    where ':user1!user1@jusot.com PRIVMSG user2 :abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyza...nopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyza' = <bound method IRCMessage.raw of <chirc.types.IRCMessage object at 0x7ff86135ddd8>>()
E        +      where <bound method IRCMessage.raw of <chirc.types.IRCMessage object at 0x7ff86135ddd8>> = <chirc.types.IRCMessage object at 0x7ff86135ddd8>.raw

tests/chirc/tests/test_robustness.py:112: AssertionError
_________________________ TestRobustness.test_length3 __________________________

self = <chirc.tests.test_robustness.TestRobustness object at 0x7ff86135ada0>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86135af60>

    def test_length3(self, irc_session):
        """
        Test sending two messages (one right after the other) that
        are exactly 512 bytes long each (including the \r\n)
        """
    
        client1 = irc_session.connect_user("user1", "User One")
        client2 = irc_session.connect_user("user2", "User Two")
    
        base = "PRIVMSG user2 :"
    
    
        msg = self._gen_long_msg(512 - len(base) - 2)
        client1.send_cmd(base + msg)
        privmsg = irc_session.get_message(client2, expect_prefix = True, expect_cmd = "PRIVMSG",
                                          expect_nparams = 2, expect_short_params = ["user2"])
>       assert len(privmsg.raw()) == 510
E       AssertionError: assert 533 == 510
E        +  where 533 = len(':user1!user1@jusot.com PRIVMSG user2 :abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyza...nopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyza')
E        +    where ':user1!user1@jusot.com PRIVMSG user2 :abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyza...nopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyza' = <bound method IRCMessage.raw of <chirc.types.IRCMessage object at 0x7ff86135a7b8>>()
E        +      where <bound method IRCMessage.raw of <chirc.types.IRCMessage object at 0x7ff86135a7b8>> = <chirc.types.IRCMessage object at 0x7ff86135a7b8>.raw

tests/chirc/tests/test_robustness.py:136: AssertionError
_________________________ TestRobustness.test_length4 __________________________

self = <chirc.tests.test_robustness.TestRobustness object at 0x7ff86122b550>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff86122bf98>

    def test_length4(self, irc_session):
        """
        Test sending messages that are 510-515 bytes long (including the \r\n)
        """
    
        client1 = irc_session.connect_user("user1", "User One")
        client2 = irc_session.connect_user("user2", "User Two")
    
        base = "PRIVMSG user2 :"
    
        for i in (510,511,512,513,514,515):
            msg = self._gen_long_msg(i - len(base) - 2)
            client1.send_cmd(base + msg)
            privmsg = irc_session.get_message(client2, expect_prefix = True, expect_cmd = "PRIVMSG",
                                              expect_nparams = 2, expect_short_params = ["user2"])
>           assert len(privmsg.raw()) == 510
E           AssertionError: assert 531 == 510
E            +  where 531 = len(':user1!user1@jusot.com PRIVMSG user2 :abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyza...lmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxy')
E            +    where ':user1!user1@jusot.com PRIVMSG user2 :abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyza...lmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxy' = <bound method IRCMessage.raw of <chirc.types.IRCMessage object at 0x7ff86122b470>>()
E            +      where <bound method IRCMessage.raw of <chirc.types.IRCMessage object at 0x7ff86122b470>> = <chirc.types.IRCMessage object at 0x7ff86122b470>.raw

tests/chirc/tests/test_robustness.py:164: AssertionError
____________________________ TestWHOIS.test_whois1 _____________________________

self = <chirc.tests.test_whois.TestWHOIS object at 0x7ff861116828>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861116be0>

    @pytest.mark.category("WHOIS")
    def test_whois1(self, irc_session):
        """
        Test doing a WHOIS on a user (user2) that is not in any channels.
        """
    
    
        client1 = irc_session.connect_user("user1", "User One")
        client2 = irc_session.connect_user("user2", "User Two")
    
        client1.send_cmd("WHOIS user2")
    
        reply = irc_session.get_reply(client1, expect_code = replies.RPL_WHOISUSER,
>                              expect_nparams = 5, long_param_re = "User Two")

tests/chirc/tests/test_whois.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:356: in get_reply
    self.verify_reply(msg, expect_code, expect_nick, expect_nparams, expect_short_params, long_param_re, long_param_values)
tests/chirc/tests/common.py:438: in verify_reply
    long_param_re = long_param_re, long_param_values = long_param_values)
tests/chirc/tests/common.py:398: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861116be0>, a = 5, b = 6
explanation = 'Expected 6 parameters, got 5 instead\n\nMESSAGE: |||:jusot.com 311 user2 user2 jusot.com * :User Two|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff861116a90>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected 6 parameters, got 5 instead
E       
E       MESSAGE: |||:jusot.com 311 user2 user2 jusot.com * :User Two|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestWHOIS.test_whois2 _____________________________

self = <chirc.tests.test_whois.TestWHOIS object at 0x7ff861111dd8>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff861111978>

    @pytest.mark.category("UPDATE_ASSIGNMENT2")
    def test_whois2(self, irc_session):
        """
        Given the following users and channels (@ denotes channel
        operators, and + denotes a user with voice privileges):
    
        #test1: @user1, user2, user3
        #test2: @user2
        #test3: @user3, @user4, user5, user6
        #test4: @user7, +user8, +user9, user1, user2
        #test5: @user1, @user5
    
        Not in a channel: user10, user11
    
        Test doing a WHOIS on user2
        """
    
>       users = irc_session.connect_and_join_channels(fixtures.channels3)

tests/chirc/tests/test_whois.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff861111978>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8611292b0>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
____________________________ TestWHOIS.test_whois3 _____________________________

self = <chirc.tests.test_whois.TestWHOIS object at 0x7ff8610e3a90>
irc_session = <chirc.tests.common.IRCSession object at 0x7ff8610e3c50>

    @pytest.mark.category("UPDATE_ASSIGNMENT2")
    def test_whois3(self, irc_session):
        """
        Given the following users and channels (@ denotes channel
        operators, and + denotes a user with voice privileges):
    
        #test1: @user1, user2, user3
        #test2: @user2
        #test3: @user3, @user4, user5, user6
        #test4: @user7, +user8, +user9, user1, user2
        #test5: @user1, @user5
    
        Not in a channel: user10, user11
    
        Where, additionally, user8 is an IRCop and is away.
    
        Test doing a WHOIS on user8
        """
    
>       users = irc_session.connect_and_join_channels(fixtures.channels3, aways=["user8"], ircops=["user8"])

tests/chirc/tests/test_whois.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/chirc/tests/common.py:182: in connect_and_join_channels
    self.verify_join(users[op], op, channel, expect_names = expect_names)
tests/chirc/tests/common.py:535: in verify_join
    self.verify_relayed_join(client, nick, channel)
tests/chirc/tests/common.py:545: in verify_relayed_join
    expect_nparams = 1, expect_short_params = [channel])
tests/chirc/tests/common.py:376: in get_message
    long_param_re, long_param_values)
tests/chirc/tests/common.py:392: in verify_message
    irc_msg = msg)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <chirc.tests.common.IRCSession object at 0x7ff8610e3c50>, a = '421'
b = 'JOIN'
explanation = 'Expected command JOIN, got 421 instead\n\nMESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||'
irc_msg = <chirc.types.IRCMessage object at 0x7ff8610e3978>

    def _assert_equals(self, a, b, explanation, irc_msg = None):
        if irc_msg is not None:
            explanation = explanation + "\n\nMESSAGE: {}".format(irc_msg.raw(bookends=True))
    
>       assert a == b, explanation
E       AssertionError: Expected command JOIN, got 421 instead
E       
E       MESSAGE: |||:jusot.com 421 user1 JOIN :Unknown command|||

tests/chirc/tests/common.py:44: AssertionError
---- generated json report: /mnt/d/CODES/GitHub/npcp/test/tests/report.json ----
----- generated html file: /mnt/d/CODES/GitHub/npcp/test/tests/report.html -----
==================== 139 failed, 85 passed in 26.60 seconds ====================
Makefile:14: recipe for target 'tests' failed
